{"version":3,"sources":["reportWebVitals.js","redux/appReducer.ts","redux/navReducer.ts","redux/redux-state.ts","assets/vk_icon.svg","things/header/header.tsx","things/header/headerContainer.tsx","things/nav/friends/friend/friend.tsx","things/nav/friends/friends.tsx","things/nav/navlink/navlink.tsx","things/nav/nav.tsx","things/nav/navContainer.tsx","hoc/withSuspense.tsx","App.js","index.js","redux/img/andrey.jpg","redux/img/fyodor.jpg","redux/img/kirill.jpg","redux/img/sasha.jpg","redux/img/vadim.jpg","redux/authReducer.ts","things/component/preloader/preloader.tsx","things/header/header.module.css","things/nav/navlink/navlink.module.css","redux/contentReducer.ts","redux/findPeopleReducer.ts","redux/dialogsReducer.ts","assets/loading.svg","things/nav/friends/friends.module.css","dal/api.ts","things/nav/friends/friend/friend.module.css","things/nav/nav.module.css"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","initialised","AppRedActions","type","AppRedThunks","initialiasationSuccess","dispatch","promise","AuthRedThunks","authMe","Promise","all","links","name","to","id","friends","img","imgvadim","imgfyodor","imgkirill","imgandrey","imgsasha","reducers","combineReducers","auth","authReducer","contentPage","contentReducer","dialogPage","dialogReducer","findpeople","findPeopleReducer","navPage","state","form","formReducer","app","action","store","createStore","applyMiddleware","thunk","Header","props","className","css","main","src","vkIcon","alt","loginCont","loginInfo","isAuth","userId","userName","connect","vk_icon","Friend","Friends","allfriends","map","el","Link","activeClassName","active","Nav","onClick","logout","mapDespatchToProps","withSuspense","Component","Suspense","fallback","DialogsContainer","React","lazy","FindPeopleContainer","Content","Login","News","Music","Settings","compose","withRouter","useMemo","exact","from","path","render","ReactDOM","basename","process","document","getElementById","userEmail","fieldError","captcha","data","error","captchaUrl","AuthRedActions","a","API","isAuthCheck","response","resultCode","email","login","postLoginData","postLoginDataApi","loginData","authCheck","stopSubmit","_error","messages","getCaptchaApi","logoutApi","Preloader","loadingIconfrom","module","exports","profile","posts","message","status","successed","newPost","text","isTrue","filter","postId","photos","ContentRedActions","createNewPost","setProfile","getStatus","deletePost","newProfilePhoto","ContentRedThunks","getUserInfo","getUser","dataUserInfo","getStatusApi","putStatus","putStatusApi","changeProfilePhoto","file","putProfilePhotoApi","profileFormSubmit","info","setState","profileFormSubmitApi","reject","people","followed","small","large","location","city","country","countPages","countPeopleOnPage","isLoading","arrayButtonsLoading","following","item","element","FindPeopleRedActions","follow","unFollow","showMore","changeActivePage","number","toggleLoading","toggle","toggleButton","bool","FindPeopleRedThunks","showPeople","count","getPeople","responce","followPerson","postFollow","unFollowPerson","deleteFollow","newState","forEach","push","persons","url","author","newMessage","DialogRedActions","instance","axios","create","withCredentials","baseURL","headers","currentPage","pageSize","get","items","post","delete","currentUserId","put","password","rememberMe","photo","photoForLoading","FormData","append"],"mappings":"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","file":"static/js/main.18398ceb.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { actionsTypes } from \"../types/types\"\r\nimport { AuthRedThunks } from \"./authReducer\"\r\n\r\nlet initialState = ({\r\n    initialised: false as boolean\r\n})\r\n\r\n// Reducer\r\n\r\ntype initialStateType = typeof initialState\r\nexport const appReducer = (state = initialState, action: actionsTypes<typeof AppRedActions>): initialStateType => {\r\n    switch (action.type) {\r\n        case 'INITIALISE_APP':\r\n            return {\r\n                ...state,\r\n                initialised: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nconst AppRedActions = {\r\n    initialiseApp: () => ({type: 'INITIALISE_APP'} as const)\r\n}\r\n\r\n// Thunks\r\n\r\nexport const AppRedThunks = {\r\n    initialiasationSuccess: () => (dispatch: any) => {\r\n        let promise = dispatch(AuthRedThunks.authMe())\r\n        Promise.all([promise]).then( () => {\r\n                dispatch(AppRedActions.initialiseApp())\r\n            })\r\n    \r\n    } \r\n}\r\n","import { friendsType, linkType } from '../types/types'\r\nimport imgandrey from './img/andrey.jpg'\r\nimport imgfyodor from './img/fyodor.jpg'\r\nimport imgkirill from './img/kirill.jpg'\r\nimport imgsasha from './img/sasha.jpg'\r\nimport imgvadim from './img/vadim.jpg'\r\n\r\n// State\r\n\r\n\r\n\r\nlet initialState = {\r\n    links: [\r\n        {name: \"Profile\", to: \"/profile\", id: 1111},\r\n        {name: \"Messages\", to: \"/dialogs\", id: 2222},\r\n        {name: \"News\", to: \"/news\", id: 3333},\r\n        {name: \"Music\", to: \"/music\", id: 4444},\r\n        {name: \"Find people\", to: \"/find\", id: 5555},\r\n        {name: \"Settings\", to: \"/settings\", id: 6666}\r\n    ] as Array<linkType>,\r\n    friends: [\r\n        { img: imgvadim, name: \"Vadim\", id: 123 },\r\n        { img: imgfyodor, name: \"Fyodor\", id: 124 },\r\n        { img: imgkirill, name: \"Kirill\", id: 125 },\r\n        { img: imgandrey, name: \"Andrey\", id: 126 },\r\n        { img: imgsasha, name: \"Sasha\", id: 127 }\r\n    ] as Array<friendsType>\r\n}\r\n\r\nexport type NavStateType = typeof initialState\r\n\r\n// Reducer\r\n\r\nexport const navReducer = (state = initialState): NavStateType => {\r\n    return state\r\n}\r\n","import thunk from \"redux-thunk\";\r\nimport { authReducer } from \"./authReducer\";\r\nimport findPeopleReducer from \"./findPeopleReducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport { appReducer } from \"./appReducer\";\r\nimport { contentReducer } from \"./contentReducer\";\r\nimport { dialogReducer } from \"./dialogsReducer\";\r\nimport { navReducer } from \"./navReducer\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\n\r\nlet reducers = combineReducers({\r\n    auth: authReducer,\r\n    contentPage: contentReducer,\r\n    dialogPage: dialogReducer,\r\n    findpeople: findPeopleReducer,\r\n    navPage: navReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport default store","export default __webpack_public_path__ + \"static/media/vk_icon.aacb54b4.svg\";","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { AuthStateType } from '../../redux/authReducer'\r\nimport css from './header.module.css'\r\n\r\ntype propsType = {\r\n    vkIcon: string\r\n    loginInfo: AuthStateType\r\n}\r\n\r\nlet Header: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={css.main}>\r\n            <img src={props.vkIcon} alt='vk_icon'></img>\r\n            <div className={css.loginCont}>\r\n                <div>\r\n                    {props.loginInfo.isAuth\r\n                        ? <NavLink to={`/profile/${props.loginInfo.userId}`}>{props.loginInfo.userName}</NavLink>\r\n                        : <NavLink to={`/login`}>login</NavLink>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import { connect } from 'react-redux'\r\nimport vk_icon from '../../assets/vk_icon.svg'\r\nimport Header from './header'\r\nimport React from 'react'\r\nimport { AuthStateType } from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/redux-state'\r\n\r\ntype propsType = {\r\n    vkIcon: string\r\n    loginInfo: AuthStateType\r\n}\r\n\r\nconst HeaderContainer: React.FC<propsType> = (props) => {\r\n    return (\r\n        <Header {...props} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    vkIcon: vk_icon,\r\n    loginInfo: state.auth\r\n})\r\nconst mapDespatchToProps = {\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDespatchToProps)(HeaderContainer)","import React from 'react'\r\nimport css from './friend.module.css'\r\n\r\ntype propsType = {\r\n    img: string\r\n    name: string\r\n}\r\n\r\nconst Friend: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={css.main}>\r\n            <img src={props.img} alt=\"avatar\" />\r\n            <p>{props.name}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friend","import css from './friends.module.css'\r\nimport Friend from './friend/friend'\r\nimport React from 'react'\r\nimport { friendsType } from '../../../types/types'\r\n\r\ntype propsType = {\r\n    state: Array<friendsType>\r\n}\r\n\r\nconst Friends: React.FC<propsType> = (props) => {\r\n\r\n    const allfriends = props.state.map(el => <Friend key={el.id} img={el.img} name={el.name} />)\r\n\r\n    return (\r\n        <div className={css.main}>\r\n            <h3>Friends</h3>\r\n            <div>\r\n                {allfriends}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friends","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport css from './navlink.module.css'\r\n\r\ntype propsType = {\r\n    to: string\r\n    name: string\r\n}\r\n\r\nconst Link: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={css.main}>\r\n            <NavLink to={props.to} activeClassName={css.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Link","import React from 'react'\r\nimport { NavStateType } from '../../redux/navReducer'\r\nimport Friends from './friends/friends'\r\nimport css from './nav.module.css'\r\nimport Link from './navlink/navlink'\r\n\r\ntype propsType = {\r\n    state: NavStateType\r\n    isAuth: boolean\r\n    \r\n    logout: () => void\r\n}\r\n\r\nconst Nav: React.FC<propsType> = (props) => {\r\n\r\n    let links = props.state.links.map( el => <Link key={el.id} name={el.name} to={el.to} /> )\r\n\r\n    return (\r\n        <div className={css.main}>\r\n            {links}\r\n            <Friends state={props.state.friends} />\r\n            {props.isAuth ? <p onClick={props.logout}>Log out</p> : null}\r\n        </div>\r\n)}\r\n\r\nexport default Nav","import { connect } from 'react-redux'\r\nimport { AuthRedThunks } from '../../redux/authReducer'\r\nimport Nav from './nav'\r\nimport React from 'react'\r\nimport { AppStateType } from '../../redux/redux-state'\r\nimport { NavStateType } from '../../redux/navReducer'\r\n\r\ntype propsType = {\r\n    state: NavStateType\r\n    isAuth: boolean\r\n\r\n    logout: () => void\r\n}\r\n\r\nconst NavContainer: React.FC<propsType> = (props) => {\r\n    return <Nav {...props} />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    state: state.navPage,\r\n    isAuth: state.auth.isAuth\r\n})\r\nconst mapDespatchToProps = {\r\n    logout: AuthRedThunks.logout\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDespatchToProps)(NavContainer)","import React, {FC} from \"react\"\r\nimport { Preloader } from \"../things/component/preloader/preloader\"\r\n\r\nexport function withSuspense<WP>(Component: FC<WP>) {\r\n\r\n    type propsType = {}\r\n\r\n    const WrappedComponent: FC<propsType> = (props) => {\r\n        return (\r\n            <React.Suspense fallback={<Preloader />}>\r\n                <Component {...props as WP} />\r\n            </React.Suspense>\r\n        )\r\n    }\r\n\r\n    return WrappedComponent\r\n}\r\n\r\n","import './App.css';\nimport HeaderContainer from './things/header/headerContainer'\nimport NavContainer from './things/nav/navContainer'\nimport { Redirect, Route, Switch, withRouter } from 'react-router-dom';\nimport React, { useMemo } from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { AppRedThunks } from './redux/appReducer';\nimport { Preloader } from './things/component/preloader/preloader';\nimport { withSuspense } from './hoc/withSuspense';\nconst DialogsContainer = React.lazy(() => import('./things/dialogs/dialogsContainer'));\nconst FindPeopleContainer = React.lazy(() => import('./things/findpeople/findpeopleContainer'));\nconst Content = React.lazy(() => import('./things/content/content'));\nconst Login = React.lazy(() => import('./things/login/login'));\nconst News = React.lazy(() => import('./things/news/news'));\nconst Music = React.lazy(() => import('./things/music/music'));\nconst Settings = React.lazy(() => import('./things/settings/settings'));\n\n\nconst App = ({ initialiasationSuccess, ...props }) => {\n\n  useMemo(() => {\n    initialiasationSuccess()\n  }, [initialiasationSuccess])\n\n\n  if (!props.isAuth) return <Preloader />\n  else return <>\n    <HeaderContainer />\n    <div className='main'>\n      <NavContainer />\n      <Switch>\n        <Redirect exact from='/' to='/profile' />\n        <Route path='/profile/:userId?' render={withSuspense(Content)} />\n        <Route path='/dialogs' render={withSuspense(DialogsContainer)} />\n        <Route path='/news' render={withSuspense(News)} />\n        <Route path='/music' render={withSuspense(Music)} />\n        <Route path='/find' render={withSuspense(FindPeopleContainer)} />\n        <Route path='/settings' render={withSuspense(Settings)} />\n        <Route path='/login' render={withSuspense(Login)} />\n      </Switch>\n    </div>\n     </> \n}\n\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.app.initialised\n})\nconst mapDespatchToProps = {\n  initialiasationSuccess: AppRedThunks.initialiasationSuccess\n}\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, mapDespatchToProps)\n)(App)","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/redux-state';\nimport App from './App'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n\nreportWebVitals();\n","export default __webpack_public_path__ + \"static/media/andrey.8cab7208.jpg\";","export default __webpack_public_path__ + \"static/media/fyodor.8864fbea.jpg\";","export default __webpack_public_path__ + \"static/media/kirill.195364cd.jpg\";","export default __webpack_public_path__ + \"static/media/sasha.f5320e26.jpg\";","export default __webpack_public_path__ + \"static/media/vadim.8abdb6ac.jpg\";","import { Dispatch } from \"redux\"\r\nimport { stopSubmit } from \"redux-form\"\r\nimport { API, loginDataType } from \"../dal/api\"\r\nimport { actionsTypes } from \"../types/types\"\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    userName: null as string | null,\r\n    userEmail: null as string | null,\r\n    isAuth: false as boolean,\r\n    fieldError: null as string | null,\r\n    captcha: null as string | null\r\n}\r\n\r\n// Reducer\r\n\r\nexport type AuthStateType = typeof initialState\r\nexport const authReducer = (state = initialState, action: actionsTypes<typeof AuthRedActions>): AuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH_ME':\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case 'FIND_ERROR':\r\n            return {\r\n                ...state,\r\n                fieldError: action.error\r\n            }\r\n        case 'GET_CAPTCHA':\r\n            return {\r\n                ...state,\r\n                captcha: action.captchaUrl\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nconst AuthRedActions = {\r\n    authMeAC: (userId: number | null, userEmail: string | null, userName: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH_ME',\r\n        data: { userId, userEmail, userName, isAuth }\r\n    } as const),\r\n    getCaptcha: (captchaUrl: string | null) => ({ type: 'GET_CAPTCHA', captchaUrl } as const),\r\n    findError: (error: string) => ({ type: 'FIND_ERROR', error} as const)\r\n}\r\n\r\n// Thunks\r\n\r\ntype dispatchType = Dispatch<actionsTypes<typeof AuthRedActions>>\r\n\r\nexport const AuthRedThunks = {\r\n    authMe: () => async (dispatch: dispatchType) => {\r\n        const response = await API.isAuthCheck()\r\n        if (response.resultCode === 0) {\r\n            let { id, email, login } = response.data\r\n            dispatch(AuthRedActions.authMeAC(id, email, login, true))\r\n        }\r\n    },\r\n    postLoginData: (data: loginDataType) => async (dispatch: dispatchType) => {\r\n        const loginData = await API.postLoginDataApi(data)\r\n        if (loginData.resultCode === 0) {\r\n            const authCheck = await API.isAuthCheck()\r\n            if (authCheck.resultCode === 0) {\r\n                let { id, email, login } = authCheck.data\r\n                dispatch(AuthRedActions.authMeAC(id, email, login, true))\r\n            }\r\n            dispatch(AuthRedActions.getCaptcha(null))\r\n        } else {\r\n            // @ts-ignore\r\n            dispatch(stopSubmit(\"login\", { _error: loginData.messages[0] }))\r\n            if (loginData.resultCode === 10) {\r\n                const captchaUrl = await API.getCaptchaApi()\r\n                dispatch(AuthRedActions.getCaptcha(captchaUrl))\r\n            }\r\n        } \r\n    },\r\n    logout: () => async (dispatch: dispatchType) => {\r\n        const response = await API.logoutApi()\r\n        if (response === 0) {\r\n            dispatch(AuthRedActions.authMeAC(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport loadingIconfrom from '../../../assets/loading.svg'\r\n\r\ntype propsType = {\r\n\r\n}\r\n\r\nexport const Preloader: React.FC<propsType> = () => {\r\n    return <img src={loadingIconfrom} alt=\"preloader\" />\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"header_main__3UPcW\",\"loginCont\":\"header_loginCont__201P4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"navlink_main__131tj\",\"active\":\"navlink_active__2z4Ca\"};","import { Dispatch } from \"redux\"\r\nimport { stopSubmit } from \"redux-form\"\r\nimport { API } from \"../dal/api\"\r\nimport { actionsTypes, photosType, PostType, profileType } from \"../types/types\"\r\nimport { AppStateType } from \"./redux-state.js\"\r\n\r\n\r\nlet initialState = {\r\n    profile: {} as profileType,\r\n    posts: [\r\n        { id: 1, message: \"Are there somebody, who is more clever then me?\" },\r\n        { id: 2, message: \"Learning React..\" },\r\n        { id: 3, message: \"I'm broken, bro\" },\r\n        { id: 4, message: \"I want to say something\" }\r\n    ] as Array<PostType>,\r\n    status: 'write something' as string,\r\n    successed: false as boolean,\r\n}\r\n\r\n// Reducer\r\n\r\ntype initialStateType = typeof initialState\r\nexport const contentReducer = (state = initialState, action: actionsTypes<typeof ContentRedActions>): initialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.text\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'GET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'SET_PROFILE_SUCCESS':\r\n            return {\r\n                ...state,\r\n                successed: action.isTrue\r\n            }\r\n        case 'DELETE_POST':\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts.filter(el => el.id !== action.postId)]\r\n            }\r\n        case 'SET_PROFILE_PHOTO':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const ContentRedActions = {\r\n    createNewPost: (text: string) => ({ type: 'ADD_POST', text } as const),\r\n    setProfile: (profile: profileType) => ({ type: 'SET_PROFILE', profile } as const),\r\n    getStatus: (status: string) => ({ type: 'GET_STATUS', status } as const),\r\n    successed: (isTrue: boolean) => ({ type: 'SET_PROFILE_SUCCESS', isTrue } as const),\r\n    deletePost: (postId: number) => ({ type: 'DELETE_POST', postId } as const),\r\n    newProfilePhoto: (photos: photosType) => ({ type: 'SET_PROFILE_PHOTO', photos } as const) \r\n}\r\n\r\ntype dispatchType = Dispatch<actionsTypes<typeof ContentRedActions>>\r\ntype getStateType = () => AppStateType\r\n\r\n// Thunks\r\n\r\nexport const ContentRedThunks = {\r\n    getUserInfo: (userId: number) => async (dispatch: dispatchType) => {\r\n        dispatch(ContentRedActions.successed(false))\r\n        const dataUserInfo = await API.getUser(userId)\r\n        dispatch(ContentRedActions.setProfile(dataUserInfo))\r\n        const data = await API.getStatusApi(userId)\r\n        dispatch(ContentRedActions.getStatus(data))\r\n        dispatch(ContentRedActions.successed(true))\r\n    },\r\n    putStatus: (status: string) => async (dispatch: dispatchType) => {\r\n        const data = await API.putStatusApi(status)\r\n        if (data === 0) {\r\n            dispatch(ContentRedActions.getStatus(status))\r\n        }\r\n    },\r\n    changeProfilePhoto: (file: any) => async (dispatch: dispatchType) => {\r\n        const status = await API.putProfilePhotoApi(file)\r\n        if (status.resultCode === 0) {\r\n            dispatch(ContentRedActions.newProfilePhoto(status.data.photos))\r\n        }\r\n    },\r\n    profileFormSubmit: (info: profileType) => async (dispatch: dispatchType, setState: getStateType) => {\r\n        const userId = setState().auth.userId\r\n        const status = await API.profileFormSubmitApi(info)\r\n        if (status.resultCode === 0) {\r\n            const dataUserInfo = await API.getUser(userId)\r\n            dispatch(ContentRedActions.setProfile(dataUserInfo))\r\n        } else {\r\n            // @ts-ignore\r\n            dispatch(stopSubmit(\"profileForm\", { _error: status.messages[0] }))\r\n            return Promise.reject(status.messages[0])\r\n        }\r\n    }\r\n}","import { Dispatch } from 'redux';\r\nimport { API } from '../dal/api';\r\nimport { actionsTypes, personType } from '../types/types'\r\nimport imgandrey from './img/andrey.jpg'\r\nimport imgfyodor from './img/fyodor.jpg'\r\nimport imgkirill from './img/kirill.jpg'\r\nimport imgsasha from './img/sasha.jpg'\r\nimport imgvadim from './img/vadim.jpg'\r\n\r\n// State\r\n\r\nlet initialState = {\r\n    people: [\r\n        { id: 1, followed: true, photos: { small: imgandrey, large: imgandrey }, name: 'Andrey', status: \"I'm not gay\", location: { city: 'London', country: 'Great Britan' } },\r\n        { id: 2, followed: false, photos: { small: imgfyodor, large: imgfyodor }, name: 'Fyodor', status: \"Hi, i'm your boss\", location: { city: 'Syktyvkar', country: 'Russia' } },\r\n        { id: 3, followed: false, photos: { small: imgkirill, large: imgkirill }, name: 'Kirill', status: \"I live in Moskow\", location: { city: 'Moskow', country: 'Russia' } },\r\n        { id: 4, followed: false, photos: { small: imgsasha, large: imgsasha }, name: 'Sasha', status: \"Hahaahahahaha\", location: { city: 'Syktyvkar', country: 'Russia' } },\r\n        { id: 5, followed: true, photos: { small: imgvadim, large: imgvadim }, name: 'Vadim', status: \"Stop calling me Huim\", location: { city: 'Kiev', country: 'Ukraine' } },\r\n    ] as Array<personType>,\r\n    countPages: 10000,\r\n    countPeopleOnPage: 10,\r\n    active: 0 as number,\r\n    isLoading: false,\r\n    arrayButtonsLoading: [] as Array<number>\r\n}\r\n\r\n// Reducer\r\n\r\ntype initialStateType = typeof initialState\r\nconst following = (item: Array<personType>, id: number, isTrue: boolean): Array<personType> => {\r\n    return item.map((el) => {\r\n        let element = el\r\n        if (el.id === id) element = { ...el, followed: isTrue }\r\n        return element\r\n    })\r\n}\r\n\r\nconst findPeopleReducer = (state = initialState, action: actionsTypes<typeof FindPeopleRedActions>): initialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                people: following(state.people, action.userId, true)\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                people: following(state.people, action.userId, false)\r\n            }\r\n        case 'GET_PEOPLE':\r\n            let newState = {\r\n                ...state,\r\n                people: [] as Array<personType>\r\n            }\r\n            action.people.forEach((el: personType) => newState.people.push(el))\r\n            return newState\r\n        case 'CHANGE_ACTIVE_PAGE':\r\n            return {\r\n                ...state,\r\n                active: action.number\r\n            }\r\n        case 'TOGGLE_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.toggle\r\n            }\r\n        case 'TOGGLE_BUTTON':\r\n            return {\r\n                ...state,\r\n                arrayButtonsLoading: action.bool ?\r\n                    [...state.arrayButtonsLoading, action.userId]\r\n                    : [...state.arrayButtonsLoading.filter(el => el !== action.userId)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const  FindPeopleRedActions = {\r\n    follow: (userId: number) => ({ type: 'FOLLOW', userId } as const),\r\n    unFollow:  (userId: number) => ({ type: 'UNFOLLOW', userId } as const),\r\n    showMore: (people:  Array<personType>) => ({ type: 'GET_PEOPLE', people } as const),\r\n    changeActivePage: (number: number) => ({ type: 'CHANGE_ACTIVE_PAGE', number } as const),\r\n    toggleLoading: (toggle: boolean) => ({ type: 'TOGGLE_LOADING', toggle } as const),\r\n    toggleButton: (bool: boolean, userId: number) => ({ type: 'TOGGLE_BUTTON', bool, userId } as const)\r\n}\r\n\r\n// Thunks\r\n\r\ntype dispatchType = Dispatch<actionsTypes<typeof FindPeopleRedActions>>\r\n\r\nexport const FindPeopleRedThunks = {\r\n    showPeople: (number: number, count: number) => async (dispatch: dispatchType) => {\r\n        dispatch(FindPeopleRedActions.toggleLoading(true))\r\n        const responce = await API.getPeople(number, count)\r\n        dispatch(FindPeopleRedActions.toggleLoading(false))\r\n        dispatch(FindPeopleRedActions.showMore(responce))\r\n    },\r\n    followPerson: (userId: number) => async (dispatch: dispatchType) => {\r\n        dispatch(FindPeopleRedActions.toggleButton(true, userId))\r\n        const response = await API.postFollow(userId)\r\n        if (response === 0) {\r\n            dispatch(FindPeopleRedActions.follow(userId))\r\n        }\r\n        dispatch(FindPeopleRedActions.toggleButton(false, userId))\r\n    },\r\n    unFollowPerson: (userId: number) => async (dispatch: dispatchType) => {\r\n        dispatch(FindPeopleRedActions.toggleButton(true, userId))\r\n        const response = await API.deleteFollow(userId)\r\n        if (response === 0) {\r\n            dispatch(FindPeopleRedActions.unFollow(userId))\r\n        }\r\n        dispatch(FindPeopleRedActions.toggleButton(false, userId))\r\n    }\r\n}\r\n\r\nexport default findPeopleReducer","import { actionsTypes, dialogsPersonType, messageType } from '../types/types'\r\nimport imgandrey from './img/andrey.jpg'\r\nimport imgfyodor from './img/fyodor.jpg'\r\nimport imgkirill from './img/kirill.jpg'\r\nimport imgsasha from './img/sasha.jpg'\r\nimport imgvadim from './img/vadim.jpg'\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    persons: [\r\n        { img: imgvadim, url: \"vadim\", name: \"Vadim\", id: 1 },\r\n        { img: imgfyodor, url: \"fyodor\", name: \"Fyodor\", id: 2 },\r\n        { img: imgkirill, url: \"kirill\", name: \"Kirill\", id: 4 },\r\n        { img: imgandrey, url: \"andrey\", name: \"Andrey\", id: 3 },\r\n        { img: imgsasha, url: \"sasha\", name: \"Sasha\", id: 5 }\r\n    ] as Array<dialogsPersonType>,\r\n    messages: [\r\n        { author: \"you\", id: 1, message: \"Hello there\" },\r\n        { author: \"not\", id: 2, message: \"Hi man\" },\r\n        { author: \"you\", id: 3, message: \"How are you\" },\r\n        { author: \"not\", id: 4, message: \"I'm good\" }\r\n    ] as Array<messageType>,\r\n}\r\n\r\n// Reducer\r\n\r\ntype initialStateType = typeof initialState\r\nexport const dialogReducer = (state = initialState, action: actionsTypes<typeof DialogRedActions>): initialStateType => {\r\n    switch(action.type) {\r\n        case 'ADD_MESSAGE':\r\n            let newMessage = {\r\n                author: \"you\",\r\n                id: 7, \r\n                message: action.text\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const DialogRedActions = {\r\n    newMessage: (text: string) => ({ type : 'ADD_MESSAGE', text } as const)\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/loading.40bf3942.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"friends_main__2Xj0f\"};","import axios from 'axios'\r\nimport FormData from 'form-data'\r\nimport { personType, profileType } from '../types/types'\r\n\r\n// Types\r\n\r\nexport type loginDataType = {\r\n    email: string, password: string, rememberMe: boolean, captcha: null | string\r\n}\r\ntype GetpeopleDataType = {\r\n    items: Array<personType>, totalCount: number, error: string\r\n}\r\ntype CommonDataType = {\r\n    resultCode: number, messages: Array<string>, data: Object\r\n}\r\ntype AuthMeDataType = {\r\n    data: {id: number, email: string, login: string}\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\ntype GetCaptchaUrlDataType = {\r\n    url: string\r\n}\r\ntype PhotosDataType = {\r\n    resultCode: number, messages: Array<string>, data: {photos: {small: string, large: string}}\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"48f5b1a7-6286-4f77-9a40-f9b16f3f5224\"\r\n    }\r\n})\r\n\r\n// API\r\n\r\nexport const API = {\r\n    getPeople: (currentPage: number, pageSize: number) => {\r\n        return instance.get<GetpeopleDataType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then( data => data.data.items)\r\n    },\r\n    postFollow: (userId: number) => {\r\n        return instance.post<CommonDataType>(`follow/${userId}`)\r\n            .then( data => data.data.resultCode)\r\n    },\r\n    deleteFollow: (userId: number) => {\r\n        return instance.delete<CommonDataType>(`follow/${userId}`)\r\n            .then( data => data.data.resultCode)\r\n    },\r\n    isAuthCheck: () => {\r\n        return instance.get<AuthMeDataType>('auth/me')\r\n            .then( data => data.data)\r\n    },\r\n    getUser: (currentUserId: number | null) => {\r\n        return instance.get<profileType>(`profile/${currentUserId}`)\r\n            .then( data => data.data)\r\n    },\r\n    getStatusApi: (userId: number) => {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then( data => data.data)\r\n    },\r\n    putStatusApi: (status: string) => {\r\n        return instance.put<CommonDataType>(`profile/status`, { status })\r\n            .then( data => data.data.resultCode)\r\n    },\r\n    postLoginDataApi: (data: loginDataType) => {\r\n        let {email, password, rememberMe, captcha} = data\r\n        return instance.post<CommonDataType>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then( response => response.data )\r\n    },\r\n    getCaptchaApi: async () => {\r\n        const response = await instance.get<GetCaptchaUrlDataType>('security/get-captcha-url')\r\n        return response.data.url\r\n    },\r\n    logoutApi: () => {\r\n        return instance.delete<CommonDataType>(`auth/login`)\r\n            .then( response => response.data.resultCode)\r\n    },\r\n    putProfilePhotoApi: async (photo: any) => {\r\n        const photoForLoading = new FormData()\r\n        photoForLoading.append('image', photo);\r\n        const response = await instance.put<PhotosDataType>('profile/photo', photoForLoading, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n        return response.data\r\n    },\r\n    profileFormSubmitApi: async (info: profileType) => {\r\n        const response = await instance.put<CommonDataType>('profile', info)\r\n        return response.data\r\n    }\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"friend_main__1S5Q_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"nav_main___aWJm\"};"],"sourceRoot":""}