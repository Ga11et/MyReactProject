{"version":3,"sources":["things/content/Description/description.module.css","things/content/Description/InfoForm/infoForm.module.css","things/component/fieldsTypes/input/Input.module.css","things/content/Description/profileStatus/profileStatus.module.css","things/content/Posts/posts.module.css","things/content/Posts/Post/post.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","things/component/fieldsTypes/input/Input.tsx","things/content/Description/InfoForm/infoForm.tsx","things/content/Description/profileInfo/profileInfo.tsx","things/content/Description/profileStatus/profileStatus.tsx","things/content/Description/description.tsx","assets/search.svg","assets/user.jpg","../node_modules/reselect/es/index.js","redux/selectors/selectors.ts","things/content/Description/descriptionContainer.tsx","hoc/withAuthRedirect.tsx","things/content/Posts/Post/miku.jpg","things/content/Posts/Post/post.tsx","things/content/Posts/posts.tsx","things/content/content.tsx"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","Input","input","meta","props","haveError","touched","error","className","css","main","cn","content","ProfileRedactingFormWithRedux","contacts","handleSubmit","onSubmit","Field","component","name","placeholder","type","id","htmlFor","keys","map","el","ProfilePageInfo","profileInfo","searchIcon","isMyProfile","Contact","setEditMode","lookingForAJob","searchWork","src","alt","lookingForAJobDescription","filter","x","data","description","aboutMe","redact","onClick","ProfileStatus","useState","editMode","status","setStatus","toggleStatus","putStatus","newTextLink","createRef","ref","onChange","current","autoFocus","onBlur","onDoubleClick","reduxForm","form","ProfileRedactingForm","Description","profileFormSubmit","changeProfilePhoto","item","profile","photos","large","altphoto","change","photo","target","files","noPic","fullName","initialValues","info","then","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","getDependencies","funcs","dependencies","every","dep","dependencyTypes","join","Error","createSelector","memoize","_len","arguments","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","apply","concat","selector","params","resetRecomputations","createSelectorCreator","func","lastArgs","lastResult","findPeople","someState","findpeople","isLoading","people","countPeople","countPeopleOnPage","active","contentPage","DescriptionSelectors","profileInfoSelector","statusSelector","isSuccessedSelector","successed","AuthSelectors","authIdSelector","auth","userId","mapDispatchToProps","getUserInfo","ContentRedThunks","setProfile","ContentRedActions","compose","withRouter","Component","connect","state","isAuth","to","authId","isSuccessed","match","idPath","setIdPath","setIsSuccessed","useEffect","useMemo","Post","pic","message","Posts","posts","useSelector","dispatch","useDispatch","postComponents","newPost","values","setSubmitting","createNewPost","isSubmitting","htmlType","disabled","swap","ContentPage","style","width"],"mappings":"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","file":"static/js/5.c11c166b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"description_item__3ckD5\",\"profile\":\"description_profile__1sy4X\",\"change\":\"description_change__3CJqI\",\"noPic\":\"description_noPic__3xdbi\",\"description\":\"description_description__3R-Th\",\"redact\":\"description_redact__3kDY1\",\"searchWork\":\"description_searchWork__2JMQc\",\"contacts\":\"description_contacts__3fIMv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"infoForm_main__2lqw-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Input_main__KctQj\",\"error\":\"Input_error__6fdZg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"profileStatus_main__3ffMe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"posts_item__3RdZp\",\"swap\":\"posts_swap__2Baxg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__27Gt3\"};","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { ErrorSpan } from \"../../error/error\"\r\nimport css from './Input.module.css'\r\nimport cn from 'classnames'\r\nimport React from \"react\"\r\n\r\ntype metaType = {\r\n    touched: boolean\r\n    error: string\r\n}\r\ntype propsType = {\r\n    input: number\r\n    meta: metaType\r\n}\r\n\r\nconst Input: React.FC<propsType> = ({ input, meta, ...props }) => {\r\n    const haveError = meta.touched && meta.error\r\n    return <div className={css.main} >\r\n        <input {...input} {...props} className={ cn({ [css.error]: haveError })} />\r\n        {haveError ? <ErrorSpan content={meta.error} /> : null}\r\n    </div>\r\n}\r\n\r\nexport default Input","import css from './infoForm.module.css'\r\nimport React from 'react'\r\nimport { Field, InjectedFormProps } from 'redux-form'\r\nimport Input from '../../../component/fieldsTypes/input/Input'\r\nimport { ErrorSpan } from '../../../component/error/error'\r\nimport { IProps, IUser } from '../description'\r\n\r\n\r\nconst ProfileRedactingFormWithRedux: React.FC<InjectedFormProps<IUser, IProps> & IProps> = ({contacts, handleSubmit, error}) => {\r\n\r\n    return <form className={css.main} onSubmit={handleSubmit}>\r\n        <Field component={Input} name=\"fullName\" placeholder=\"Write your name\" />\r\n        <Field component={\"input\"} type=\"checkbox\" name=\"lookingForAJob\" id=\"areYouWork\" />\r\n        <label htmlFor=\"areYouWork\" >Are you work?</label>\r\n        <Field component={Input} name={\"lookingForAJobDescription\"} placeholder=\"Where you work\" />\r\n        <Field component={Input} name={\"aboutMe\"} placeholder=\"Tell about you\" />\r\n\r\n        <h4>Contacts:</h4>\r\n        {Object.keys(contacts).map( el => {\r\n            return <Field key={el} component={Input} name={`contacts.${el}`} placeholder={el} />\r\n        })}\r\n\r\n        { error && <ErrorSpan content={error} /> }\r\n        <button>Save</button>\r\n    </form>\r\n}\r\n\r\n\r\n\r\nexport default ProfileRedactingFormWithRedux\r\n","import React from 'react'\r\nimport { profileType } from '../../../../types/types'\r\nimport css from '../description.module.css'\r\n\r\ntype propsType = {\r\n    profileInfo: profileType\r\n    searchIcon: string\r\n    isMyProfile: boolean\r\n    Contact: any\r\n\r\n    setEditMode: (some: boolean) => void\r\n}\r\n\r\nconst ProfilePageInfo: React.FC<propsType> = ({profileInfo, searchIcon, isMyProfile, Contact, setEditMode}) => {\r\n    const isValidcontactsType = (x: string): x is keyof typeof profileInfo.contacts => x in profileInfo.contacts\r\n    return <>\r\n    {profileInfo.lookingForAJob\r\n        ? <div className={css.searchWork}>\r\n            <img src={searchIcon} alt=\"searchIcon\" />\r\n            <label>{profileInfo.lookingForAJobDescription}</label>\r\n        </div>\r\n        : null}\r\n    <div className={css.contacts}>\r\n        {Object.keys(profileInfo.contacts)\r\n            .filter(isValidcontactsType)\r\n            .map(el => {\r\n            return <Contact key={el} name={el} data={profileInfo.contacts[el]} />\r\n        })}\r\n    </div>\r\n    <p className={css.description} > {profileInfo.aboutMe}</p>\r\n    {isMyProfile && <button className={css.redact} onClick={() => { setEditMode(true) }}>Redact</button>}\r\n</>\r\n}\r\n\r\nexport default ProfilePageInfo","import css from './profileStatus.module.css'\r\nimport React, { useState, createRef } from 'react'\r\n\r\ntype propsType = {\r\n    isMyProfile: boolean\r\n    status: string\r\n\r\n    putStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus: React.FC<propsType> = ({isMyProfile, ...props}) => {\r\n    \r\n    \r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    const toggleStatus = () => {\r\n        if (editMode) {\r\n            setEditMode(false)\r\n            props.putStatus(status)\r\n        } else if (isMyProfile) setEditMode(true)\r\n    }\r\n\r\n    const newTextLink = createRef<HTMLInputElement>();\r\n    \r\n    const writing = () => {\r\n        if (newTextLink.current) setStatus(newTextLink.current.value)\r\n    }\r\n\r\n    return <div className={css.main}>\r\n        {editMode \r\n            ? <input ref={newTextLink} \r\n                    onChange={ () => {writing()}} \r\n                    autoFocus={true} \r\n                    onBlur={ () => {toggleStatus()} } \r\n                    value={status} />\r\n            : <p onDoubleClick={ () => {toggleStatus()} } >\r\n                {status}\r\n            </p> }\r\n    </div>\r\n}\r\n\r\nexport default ProfileStatus","import React, { useState } from 'react'\r\nimport { reduxForm } from 'redux-form'\r\nimport { contactsType, profileType } from '../../../types/types'\r\nimport css from './description.module.css'\r\nimport ProfileRedactingForm from './InfoForm/infoForm'\r\nimport ProfilePageInfo from './profileInfo/profileInfo'\r\nimport ProfileStatus from './profileStatus/profileStatus'\r\n\r\nexport type IUser = profileType\r\n\r\nexport type IProps = {\r\n    contacts: contactsType\r\n    initialValues: profileType\r\n\r\n    setEditMode: (some: boolean) => void\r\n    onSubmit: (info: profileType) => void\r\n}\r\n\r\nconst ProfileRedactingFormWithRedux = reduxForm<IUser, IProps>({ form: 'profileForm' })(ProfileRedactingForm)\r\n\r\ntype propsType = {\r\n    searchIcon: string\r\n    isMyProfile: boolean\r\n    profileInfo: profileType\r\n    altphoto: string\r\n    status: string\r\n\r\n    profileFormSubmit: (info: profileType) => Promise<void>\r\n    changeProfilePhoto: (file: any) => void\r\n    putStatus: (status: string) => void\r\n}\r\n\r\nconst Description: React.FC<propsType> = ({ searchIcon, isMyProfile, profileFormSubmit, changeProfilePhoto, profileInfo, ...props }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const changePhoto = (photo: any) => {\r\n        changeProfilePhoto(photo.target.files[0])\r\n    }\r\n\r\n    const formSubmit = (info: profileType) => {\r\n        profileFormSubmit(info)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={css.item}>\r\n            <section className={css.profile} >\r\n                <div>\r\n                    <img src={profileInfo.photos.large\r\n                        ? profileInfo.photos.large\r\n                        : props.altphoto} alt=\"avatar\" />\r\n                    <div className={css.change} >\r\n                        <input type=\"file\" id=\"file\" onChange={changePhoto} />\r\n                        {isMyProfile && <label htmlFor=\"file\" >Change</label>}\r\n                    </div>\r\n                </div>\r\n                <div className={css.noPic}>\r\n                    <h3>{profileInfo.fullName}</h3>\r\n                    \r\n                    <ProfileStatus\r\n                        status={props.status}\r\n                        putStatus={props.putStatus}\r\n                        isMyProfile={isMyProfile} />\r\n\r\n                    {editMode\r\n                        ? <ProfileRedactingFormWithRedux\r\n                            contacts={profileInfo.contacts}\r\n                            initialValues={profileInfo}\r\n                            setEditMode={setEditMode}\r\n                            onSubmit={formSubmit} />\r\n                        : <ProfilePageInfo \r\n                            setEditMode={setEditMode} \r\n                            Contact={Contact} \r\n                            profileInfo={profileInfo}\r\n                            searchIcon={searchIcon}\r\n                            isMyProfile={isMyProfile} />\r\n                    }\r\n                </div>\r\n            </section>\r\n        </div >\r\n    )\r\n}\r\n\r\ntype contactPropsType = {\r\n    name: string\r\n    data: string\r\n}\r\n\r\nconst Contact: React.FC<contactPropsType> = ({ name, data }) => {\r\n    if (!!data) return <p>{name}: <span>{data}</span></p>\r\n    else return null\r\n}\r\n\r\nexport default Description\r\n","export default __webpack_public_path__ + \"static/media/search.6174e09b.svg\";","export default __webpack_public_path__ + \"static/media/user.5edf0c2b.jpg\";","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import { createSelector } from \"reselect\"\r\nimport { AppStateType } from \"../redux-state\"\r\n\r\n// FindPeoplePage\r\nconst findPeople = (someState: AppStateType) => someState.findpeople\r\nexport const FindPeoplrSelectors = {\r\n    isLoadingSelector: createSelector( findPeople, data => data.isLoading),\r\n    getPeopleSelector: createSelector( findPeople, data => data.people),\r\n    countPagesSelector: createSelector( findPeople, data => data.countPeople),\r\n    countPeopleOnPageSelector: createSelector( findPeople, data => data.countPeopleOnPage),\r\n    activePageSelector: createSelector( findPeople, data => data.active)\r\n}\r\n\r\n// Description\r\nconst description = (someState: AppStateType) => someState.contentPage\r\nexport const DescriptionSelectors = {\r\n    profileInfoSelector: createSelector( description, data => data.profile),\r\n    statusSelector: createSelector( description, data => data.status),\r\n    isSuccessedSelector: createSelector( description, data => data.successed)\r\n}\r\n\r\n// Auth\r\nconst auth = (someState: AppStateType) => someState.auth\r\nexport const AuthSelectors = {\r\n    authIdSelector: createSelector( auth, data => data.userId)\r\n}\r\n\r\n","import { connect } from 'react-redux'\r\nimport Description from './description'\r\nimport searchIcon from '../../../assets/search.svg'\r\nimport { ContentRedActions, ContentRedThunks } from '../../../redux/contentReducer'\r\nimport { Redirect, withRouter } from 'react-router-dom'\r\nimport altphoto from '../../../assets/user.jpg'\r\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect'\r\nimport { Preloader } from '../../component/preloader/preloader'\r\nimport React, { useEffect, useState, useMemo, FC } from 'react'\r\nimport { profileType } from '../../../types/types'\r\nimport { AppStateType } from '../../../redux/redux-state'\r\nimport { AuthSelectors, DescriptionSelectors } from '../../../redux/selectors/selectors'\r\nimport { compose } from 'redux'\r\n\r\ntype propsType = {\r\n    authId: number\r\n    match: any\r\n    isSuccessed: boolean\r\n    searchIcon: string\r\n    profileInfo: profileType\r\n    altphoto: string\r\n    status: string\r\n\r\n    putStatus: (status: string) => void\r\n    changeProfilePhoto: (file: any) => void\r\n    profileFormSubmit: (info: profileType) => Promise<void>\r\n    getUserInfo: (id: number) => profileType\r\n    setProfile: (profile: profileType) => void\r\n}\r\n\r\nconst DescriptionContainer: React.FC<propsType> = ({authId, getUserInfo, ...props}) => {\r\n\r\n    const [idPath, setIdPath] = useState(props.match.params.userId) \r\n    const [isSuccessed, setIsSuccessed] = useState(props.isSuccessed)\r\n\r\n    const isMyProfile = (+idPath === +authId)\r\n\r\n    useEffect( () => {\r\n        setIdPath(props.match.params.userId)\r\n    }, [props.match.params.userId] )\r\n\r\n    useEffect( () => {\r\n        setIsSuccessed(props.isSuccessed)\r\n    }, [props.isSuccessed] )\r\n\r\n    useMemo( () => {\r\n        if (idPath) getUserInfo(idPath)\r\n    }, [idPath, getUserInfo])\r\n\r\n    if (!idPath) return <Redirect to={`profile/${authId}`} />\r\n    else if (!isSuccessed) return <Preloader /> \r\n    else return <Description isMyProfile={isMyProfile} {...props} />\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    searchIcon,\r\n    altphoto,\r\n    profileInfo: DescriptionSelectors.profileInfoSelector(state),\r\n    status: DescriptionSelectors.statusSelector(state),\r\n    authId: AuthSelectors.authIdSelector(state),\r\n    isSuccessed: DescriptionSelectors.isSuccessedSelector(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    getUserInfo: ContentRedThunks.getUserInfo,\r\n    putStatus: ContentRedThunks.putStatus,\r\n    setProfile: ContentRedActions.setProfile,\r\n    changeProfilePhoto: ContentRedThunks.changeProfilePhoto,\r\n    profileFormSubmit: ContentRedThunks.profileFormSubmit\r\n}\r\n\r\nexport default compose<FC<{}>>(\r\n    withRouter,\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(DescriptionContainer)","import { AppStateType } from '../redux/redux-state';\r\nimport React, {FC } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { RedirectProps } from \"react-router\"\r\n\r\ntype propsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WP extends RedirectProps>(Component: FC<WP>) {\r\n\r\n    const RedirectComponent: FC<RedirectProps & propsType> = ({isAuth, ...props}) => {\r\n        \r\n        if (!isAuth) return <Redirect to=\"/login\" />\r\n        else return <Component {...props as WP} />\r\n    \r\n    }\r\n\r\n    const mapStateToProps = (state: AppStateType) => ({\r\n        isAuth: state.auth.isAuth\r\n    })\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/miku.43c6175c.jpg\";","import css from './post.module.css'\r\nimport pic from './miku.jpg'\r\nimport React from 'react'\r\n\r\ntype propsType = {\r\n    message: string\r\n}\r\n\r\nlet Post: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={css.item}>\r\n            <img src={pic} alt=\"\" />\r\n            <p>{props.message}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import css from './posts.module.css'\r\nimport Post from './Post/post'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../../redux/redux-state'\r\nimport { ContentRedActions } from '../../../redux/contentReducer'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { Button } from 'antd'\r\n\r\n\r\nexport const Posts: React.FC = (props) => {\r\n\r\n    const posts = useSelector((state: AppStateType) => state.contentPage.posts)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const postComponents = posts\r\n        .map(el => <Post key={el.id} message={el.message} />)\r\n\r\n    return (\r\n        <div className={css.item}>\r\n            <Formik\r\n                initialValues={{ newPost: '' }}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    dispatch(ContentRedActions.createNewPost(values.newPost))\r\n                    setSubmitting(false);\r\n                }} >\r\n                {({ isSubmitting }) => (\r\n                    <Form className={css.main}>\r\n                        <Field component='textarea' name='newPost' />\r\n                        <Button type=\"default\" htmlType='submit' disabled={isSubmitting}>\r\n                            Send\r\n                        </Button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n            <div className={css.swap}>\r\n                {postComponents}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import DescriptionContainer from './Description/descriptionContainer'\r\nimport React from 'react'\r\nimport { Posts } from './Posts/posts'\r\n\r\ntype propsType = {\r\n}\r\n\r\nconst ContentPage: React.FC<propsType> = (props) => {\r\n    return <section style={{ width: '100%' }}>\r\n            <DescriptionContainer />\r\n            <Posts />\r\n        </section>\r\n}\r\n\r\nexport default ContentPage\r\n"],"sourceRoot":""}