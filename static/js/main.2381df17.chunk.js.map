{"version":3,"sources":["things/component/preloader/preloader.tsx","things/dialogs/dialogscomponents/person/person.module.css","things/header/header.module.css","redux/findPeopleReducer.ts","redux/contentReducer.ts","things/component/error/error.tsx","dal/chatAPI.ts","redux/chatReducer.ts","assets/loading.svg","things/component/error/error.module.css","things/music/music.module.css","things/news/news.module.css","things/settings/settings.module.css","dal/api.ts","things/component/validatior/valodator.ts","reportWebVitals.js","redux/appReducer.ts","redux/dialogsReducer.ts","redux/navReducer.ts","redux/redux-state.ts","things/nav/navlink/navlink.tsx","things/dialogs/dialogscomponents/person/person.tsx","things/dialogs/dialogscomponents/message/message.tsx","things/dialogs/dialogs.tsx","things/music/music.tsx","things/news/news.tsx","things/settings/settings.tsx","things/header/header.tsx","assets/vk_icon.svg","App–°opy.tsx","index.js","redux/img/andrey.jpg","redux/img/fyodor.jpg","redux/img/kirill.jpg","redux/img/sasha.jpg","redux/img/vadim.jpg","redux/authReducer.ts","things/dialogs/dialogs.module.css","things/dialogs/dialogscomponents/message/message.module.css"],"names":["Preloader","src","loadingIconfrom","alt","module","exports","initialState","people","id","followed","photos","small","imgandrey","large","name","status","location","city","country","imgfyodor","imgkirill","imgsasha","imgvadim","countPeople","countPeopleOnPage","active","isLoading","arrayButtonsLoading","searchForm","term","friend","following","item","isTrue","map","el","element","FindPeopleRedActions","follow","userId","type","unFollow","showMore","changeActivePage","number","toggleLoading","toggle","toggleButton","bool","putSearchForm","formik","putCountPeople","newCount","FindPeopleRedThunks","showPeople","count","dispatch","setState","a","API","getPeople","responce","totalCount","items","followPerson","postFollow","unFollowPerson","deleteFollow","findPeopleReducer","state","action","newState","forEach","push","filter","profile","posts","message","successed","contentReducer","newPost","text","postId","ContentRedActions","createNewPost","setProfile","setStatus","deletePost","newProfilePhoto","ContentRedThunks","getUserInfo","getUser","dataUserInfo","getStatusApi","data","putStatus","putStatusApi","changeProfilePhoto","file","putProfilePhotoApi","resultCode","profileFormSubmit","info","auth","profileFormSubmitApi","stopSubmit","_error","messages","Promise","reject","ErrorSpan","props","className","css","content","ws","subscribers","createChannel","cleanUp","WebSocket","subscriber","addEventListener","openHandler","closeHandler","messageHandler","console","log","setTimeout","event","newMessages","JSON","parse","removeEventListener","close","ChatAPI","callback","send","isConnection","chatReducer","payload","ChatRedActions","_newMessageHandler","newMessageHandlerCreator","_setStatusHandler","setStatusHandlerCreator","ChatRedThunks","startMessagesListening","stopMessagesListening","sendMessage","instance","axios","create","withCredentials","baseURL","headers","currentPage","pageSize","get","then","post","delete","isAuthCheck","currentUserId","put","postLoginDataApi","email","password","rememberMe","captcha","response","getCaptchaApi","url","logoutApi","photo","photoForLoading","FormData","append","maxValue","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialised","AppRedActions","AppRedThunks","promise","AuthRedThunks","authMe","all","persons","img","author","DialogRedActions","links","to","friends","reducers","combineReducers","authReducer","contentPage","dialogPage","newMessage","findpeople","navPage","form","formReducer","app","chat","store","createStore","applyMiddleware","thunk","Link","Person","main","activeClassName","Message","you","undertext","required","value","undefined","DialogsPage","useSelector","useDispatch","personComponents","messageComponents","columns","DialogFormRedux","onSubmit","textWriting","maxLength30","length","Textarea","input","meta","haveError","error","touched","errorMessage","reduxForm","handleSubmit","Field","component","validate","MusicPage","NewsPage","SettingsPage","LoginInfoInHeader","loginInfo","isAuth","link","userName","FindPeoplePage","React","lazy","ContentPage","LoginPage","ChatPage","withRouter","Header","Layout","Content","Footer","Sider","isLoginned","useMemo","style","background","fontSize","height","justify","align","vkIcon","padding","width","mode","border","Item","danger","marginTop","htmlType","onClick","logout","minHeight","display","flexDirection","alignItems","fallback","exact","from","path","render","textAlign","color","ReactDOM","basename","process","document","getElementById","userEmail","fieldError","captchaUrl","AuthRedActions","login","postLoginData","loginData","authCheck"],"mappings":"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","file":"static/js/main.2381df17.chunk.js","sourcesContent":["import React from 'react'\r\nimport loadingIconfrom from '../../../assets/loading.svg'\r\n\r\ntype propsType = {\r\n\r\n}\r\n\r\nexport const Preloader: React.FC<propsType> = () => {\r\n    return <img src={loadingIconfrom} alt=\"preloader\" />\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"person_main__Jst0S\",\"active\":\"person_active__3mQ__\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"header_link__2VPQb\"};","import { Dispatch } from 'redux';\r\nimport { API } from '../dal/api';\r\nimport { actionsTypes, personType, searchFormType } from '../types/types'\r\nimport imgandrey from './img/andrey.jpg'\r\nimport imgfyodor from './img/fyodor.jpg'\r\nimport imgkirill from './img/kirill.jpg'\r\nimport imgsasha from './img/sasha.jpg'\r\nimport imgvadim from './img/vadim.jpg'\r\n\r\n// State\r\n\r\nlet initialState = {\r\n    people: [\r\n        { id: 1, followed: true, photos: { small: imgandrey, large: imgandrey }, name: 'Andrey', status: \"I'm not gay\", location: { city: 'London', country: 'Great Britan' } },\r\n        { id: 2, followed: false, photos: { small: imgfyodor, large: imgfyodor }, name: 'Fyodor', status: \"Hi, i'm your boss\", location: { city: 'Syktyvkar', country: 'Russia' } },\r\n        { id: 3, followed: false, photos: { small: imgkirill, large: imgkirill }, name: 'Kirill', status: \"I live in Moskow\", location: { city: 'Moskow', country: 'Russia' } },\r\n        { id: 4, followed: false, photos: { small: imgsasha, large: imgsasha }, name: 'Sasha', status: \"Hahaahahahaha\", location: { city: 'Syktyvkar', country: 'Russia' } },\r\n        { id: 5, followed: true, photos: { small: imgvadim, large: imgvadim }, name: 'Vadim', status: \"Stop calling me Huim\", location: { city: 'Kiev', country: 'Ukraine' } },\r\n    ] as Array<personType>,\r\n    countPeople: 10000,\r\n    countPeopleOnPage: 10,\r\n    active: 1 as number,\r\n    isLoading: false,\r\n    arrayButtonsLoading: [] as Array<number>,\r\n    searchForm: {term: '', friend: ''} as searchFormType\r\n}\r\n\r\n// Reducer\r\n\r\ntype FindPeopleStateType = typeof initialState\r\nconst following = (item: Array<personType>, id: number, isTrue: boolean): Array<personType> => {\r\n    return item.map((el) => {\r\n        let element = el\r\n        if (el.id === id) element = { ...el, followed: isTrue }\r\n        return element\r\n    })\r\n}\r\n\r\nexport const findPeopleReducer = (state = initialState, action: actionsTypes<typeof FindPeopleRedActions>): FindPeopleStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                people: following(state.people, action.userId, true)\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                people: following(state.people, action.userId, false)\r\n            }\r\n        case 'GET_PEOPLE':\r\n            let newState = {\r\n                ...state,\r\n                people: [] as Array<personType>\r\n            }\r\n            action.people.forEach((el: personType) => newState.people.push(el))\r\n            return newState\r\n        case 'CHANGE_ACTIVE_PAGE':\r\n            return {\r\n                ...state,\r\n                active: action.number\r\n            }\r\n        case 'TOGGLE_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.toggle\r\n            }\r\n        case 'TOGGLE_BUTTON':\r\n            return {\r\n                ...state,\r\n                arrayButtonsLoading: action.bool ?\r\n                    [...state.arrayButtonsLoading, action.userId]\r\n                    : [...state.arrayButtonsLoading.filter(el => el !== action.userId)]\r\n            }\r\n        case 'PUT_SEARCH_FORM':\r\n            return {\r\n                ...state,\r\n                searchForm: action.formik\r\n            }\r\n        case 'PUT_COUNT_PEOPLE':\r\n            return {\r\n                ...state,\r\n                countPeople: action.newCount\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const FindPeopleRedActions = {\r\n    follow: (userId: number) => ({ type: 'FOLLOW', userId } as const),\r\n    unFollow:  (userId: number) => ({ type: 'UNFOLLOW', userId } as const),\r\n    showMore: (people:  Array<personType>) => ({ type: 'GET_PEOPLE', people } as const),\r\n    changeActivePage: (number: number) => ({ type: 'CHANGE_ACTIVE_PAGE', number } as const),\r\n    toggleLoading: (toggle: boolean) => ({ type: 'TOGGLE_LOADING', toggle } as const),\r\n    toggleButton: (bool: boolean, userId: number) => ({ type: 'TOGGLE_BUTTON', bool, userId } as const),\r\n    putSearchForm: (formik: searchFormType) => ({ type: 'PUT_SEARCH_FORM', formik } as const),\r\n    putCountPeople: (newCount: number) => ({ type: 'PUT_COUNT_PEOPLE', newCount } as const)\r\n}\r\n\r\n// Thunks\r\n\r\ntype dispatchType = Dispatch<actionsTypes<typeof FindPeopleRedActions>>\r\ntype getStateType = () => FindPeopleStateType\r\n\r\nexport const FindPeopleRedThunks = {\r\n    showPeople: (number: number, count: number, searchForm: searchFormType) => async (dispatch: dispatchType, setState: getStateType) => {\r\n        dispatch(FindPeopleRedActions.toggleLoading(true))\r\n        const responce = await API.getPeople(number, count, searchForm)\r\n        dispatch(FindPeopleRedActions.toggleLoading(false))\r\n        dispatch(FindPeopleRedActions.putCountPeople(responce.totalCount))\r\n        dispatch(FindPeopleRedActions.showMore(responce.items))\r\n    },\r\n    followPerson: (userId: number) => async (dispatch: dispatchType) => {\r\n        dispatch(FindPeopleRedActions.toggleButton(true, userId))\r\n        const response = await API.postFollow(userId)\r\n        if (response === 0) {\r\n            dispatch(FindPeopleRedActions.follow(userId))\r\n        }\r\n        dispatch(FindPeopleRedActions.toggleButton(false, userId))\r\n    },\r\n    unFollowPerson: (userId: number) => async (dispatch: dispatchType) => {\r\n        dispatch(FindPeopleRedActions.toggleButton(true, userId))\r\n        const response = await API.deleteFollow(userId)\r\n        if (response === 0) {\r\n            dispatch(FindPeopleRedActions.unFollow(userId))\r\n        }\r\n        dispatch(FindPeopleRedActions.toggleButton(false, userId))\r\n    }\r\n}\r\n\r\nexport default findPeopleReducer","import { Dispatch } from \"redux\"\r\nimport { stopSubmit } from \"redux-form\"\r\nimport { API } from \"../dal/api\"\r\nimport { actionsTypes, photosType, PostType, profileType } from \"../types/types\"\r\nimport { AppStateType } from \"./redux-state.js\"\r\n\r\n\r\nconst initialState = {\r\n    profile: {} as profileType,\r\n    posts: [\r\n        { id: 1, message: \"Are there somebody, who is more clever then me?\" },\r\n        { id: 2, message: \"Learning React..\" },\r\n        { id: 3, message: \"I'm broken, bro\" },\r\n        { id: 4, message: \"I want to say something\" }\r\n    ] as Array<PostType>,\r\n    status: 'write something' as string,\r\n    successed: false as boolean,\r\n}\r\n\r\n// Reducer\r\n\r\ntype initialStateType = typeof initialState\r\nexport const contentReducer = (state = initialState, action: actionsTypes<typeof ContentRedActions>): initialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.text\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'GET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'SET_PROFILE_SUCCESS':\r\n            return {\r\n                ...state,\r\n                successed: action.isTrue\r\n            }\r\n        case 'DELETE_POST':\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts.filter(el => el.id !== action.postId)]\r\n            }\r\n        case 'SET_PROFILE_PHOTO':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const ContentRedActions = {\r\n    createNewPost: (text: string) => ({ type: 'ADD_POST', text } as const),\r\n    setProfile: (profile: profileType) => ({ type: 'SET_PROFILE', profile } as const),\r\n    setStatus: (status: string) => ({ type: 'GET_STATUS', status } as const),\r\n    successed: (isTrue: boolean) => ({ type: 'SET_PROFILE_SUCCESS', isTrue } as const),\r\n    deletePost: (postId: number) => ({ type: 'DELETE_POST', postId } as const),\r\n    newProfilePhoto: (photos: photosType) => ({ type: 'SET_PROFILE_PHOTO', photos } as const) \r\n}\r\n\r\ntype dispatchType = Dispatch<actionsTypes<typeof ContentRedActions>>\r\ntype getStateType = () => AppStateType\r\n\r\n// Thunks\r\n\r\nexport const ContentRedThunks = {\r\n    getUserInfo: (userId: number) => async (dispatch: dispatchType) => {\r\n        dispatch(ContentRedActions.successed(false))\r\n        const dataUserInfo = await API.getUser(userId)\r\n        dispatch(ContentRedActions.setProfile(dataUserInfo))\r\n        const data = await API.getStatusApi(userId)\r\n        dispatch(ContentRedActions.setStatus(data))\r\n        dispatch(ContentRedActions.successed(true))\r\n    },\r\n    putStatus: (status: string) => async (dispatch: dispatchType) => {\r\n        const data = await API.putStatusApi(status)\r\n        if (data === 0) {\r\n            dispatch(ContentRedActions.setStatus(status))\r\n        }\r\n    },\r\n    changeProfilePhoto: (file: File) => async (dispatch: dispatchType) => {\r\n        const status = await API.putProfilePhotoApi(file)\r\n        if (status.resultCode === 0) {\r\n            dispatch(ContentRedActions.newProfilePhoto(status.data.photos))\r\n        }\r\n    },\r\n    profileFormSubmit: (info: profileType) => async (dispatch: dispatchType, setState: getStateType) => {\r\n        const userId = setState().auth.userId\r\n        const status = await API.profileFormSubmitApi(info)\r\n        if (status.resultCode === 0) {\r\n            const dataUserInfo = await API.getUser(userId)\r\n            dispatch(ContentRedActions.setProfile(dataUserInfo))\r\n        } else {\r\n            // @ts-ignore\r\n            dispatch(stopSubmit(\"profileForm\", { _error: status.messages[0] }))\r\n            return Promise.reject(status.messages[0])\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport css from './error.module.css'\r\n\r\ntype propsType = {\r\n    content: string\r\n}\r\n\r\nexport const ErrorSpan: React.FC<propsType> = (props) => {\r\n    return <span className={css.item} {...props}>{props.content}</span>\r\n}","\r\n// Types\r\n\r\nimport { ChatMessageType } from \"../types/types\"\r\n\r\n\r\ntype SubscriberMessageRecievedType = (messages: ChatMessageType[]) => void\r\ntype SubscriberSetStatusType = (status: boolean) => void\r\ntype SubscribersType = SubscriberSetStatusType | SubscriberMessageRecievedType\r\ntype SubscribersEventsType = 'setStatus' | 'messageRecieved'\r\n\r\n// consts\r\n\r\nlet ws: WebSocket\r\nlet subscribers = {\r\n    'setStatus': [] as SubscriberSetStatusType[],\r\n    'messageRecieved': [] as SubscriberMessageRecievedType[]\r\n}\r\n\r\n// Functions\r\n\r\nconst createChannel = () => {\r\n    cleanUp()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    subscribers.setStatus.forEach((subscriber) => subscriber(false))\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n}\r\nconst closeHandler = () => {\r\n    console.log('Unconnected, try to connect')\r\n    setTimeout(createChannel, 1000)\r\n}\r\nconst messageHandler = (event: MessageEvent) => {\r\n    const newMessages = JSON.parse(event.data)\r\n    subscribers['messageRecieved'].forEach( subscriber => subscriber(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    console.log('channel opened')\r\n    subscribers['setStatus'].forEach((subscriber) => subscriber(true))\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.close()\r\n\r\n}\r\n\r\n// API\r\n\r\nexport const ChatAPI = {\r\n    subscribe(event: SubscribersEventsType, callback: SubscribersType) {\r\n        // @ts-ignore\r\n        subscribers[event].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[event] = subscribers[event].filter( subscriber => subscriber !== callback)\r\n        }\r\n    },\r\n    unSubscribe(event: SubscribersEventsType, callback: SubscribersType) {\r\n            // @ts-ignore\r\n            subscribers[event] = subscribers[event].filter( subscriber => subscriber !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    },\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messageRecieved'] = []\r\n        subscribers['setStatus'] = []\r\n        cleanUp()\r\n    }\r\n}","import { Dispatch } from \"redux\"\r\nimport { ChatAPI } from \"../dal/chatAPI\"\r\nimport { actionsTypes, ChatMessageType } from \"../types/types\"\r\n\r\nconst initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    isConnection: false\r\n}\r\n\r\n// Reducer\r\n\r\nexport type ChatStateType = typeof initialState\r\nexport const chatReducer = (state = initialState, action: actionsTypes<typeof ChatRedActions>): ChatStateType => {\r\n    switch (action.type) {\r\n        case 'MESSAGES_RECIEVED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages]\r\n            }\r\n        case 'SET_CONNECTION':\r\n            console.log(action.payload.status)\r\n            return {\r\n                ...state,\r\n                isConnection: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const ChatRedActions = {\r\n    messagesRecieved: (messages: ChatMessageType[]) => ({ \r\n        type: 'MESSAGES_RECIEVED', payload: {messages}\r\n    } as const),\r\n    setConnection: (status: boolean) => ({ \r\n        type: 'SET_CONNECTION', payload: {status}\r\n    } as const)\r\n}\r\n\r\n// Thunks\r\n\r\ntype AuthRedDispatchType = Dispatch<actionsTypes<typeof ChatRedActions>>\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: AuthRedDispatchType) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages: ChatMessageType[]) => {\r\n            dispatch(ChatRedActions.messagesRecieved(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\nlet _setStatusHandler: ( (status: boolean) => void ) | null = null \r\nconst setStatusHandlerCreator = (dispatch: AuthRedDispatchType) => {\r\n    if (_setStatusHandler === null) {\r\n        _setStatusHandler = (status: boolean) => {\r\n            dispatch(ChatRedActions.setConnection(status))\r\n        }\r\n    }\r\n    return _setStatusHandler\r\n}\r\n\r\nexport const ChatRedThunks = {\r\n    startMessagesListening: () => (dispatch: AuthRedDispatchType) => {\r\n        ChatAPI.start()\r\n        ChatAPI.subscribe( 'messageRecieved', newMessageHandlerCreator(dispatch) )\r\n        ChatAPI.subscribe( 'setStatus', setStatusHandlerCreator(dispatch) )\r\n    },\r\n    stopMessagesListening: () => (dispatch: AuthRedDispatchType) => {\r\n        ChatAPI.unSubscribe( 'messageRecieved', newMessageHandlerCreator(dispatch) )\r\n        ChatAPI.unSubscribe( 'setStatus', setStatusHandlerCreator(dispatch) )\r\n        ChatAPI.stop()\r\n    },\r\n    sendMessage: (message: string) => (dispatch: AuthRedDispatchType) => {\r\n        ChatAPI.sendMessage(message)\r\n    }\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/loading.40bf3942.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"error_item__3EPcF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"music_item__3UQAQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"news_item__2qC3n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"settings_item__2IkNA\"};","import axios from 'axios'\r\nimport FormData from 'form-data'\r\nimport { personType, profileType, searchFormType } from '../types/types'\r\n\r\n// Types\r\n\r\nexport type loginDataType = {\r\n    email: string, password: string, rememberMe: boolean, captcha: null | string\r\n}\r\ntype GetpeopleDataType = {\r\n    items: Array<personType>, totalCount: number, error: string\r\n}\r\nexport type CommonDataType = {\r\n    resultCode: number, messages: Array<string>, data: Object\r\n}\r\nexport type AuthMeDataType = {\r\n    data: {id: number, email: string, login: string}\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\ntype GetCaptchaUrlDataType = {\r\n    url: string\r\n}\r\nexport type PhotosDataType = {\r\n    resultCode: number, messages: Array<string>, data: {photos: {small: string, large: string}}\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"3e289f88-561e-411a-9d9b-7a41c7a17d8c\"\r\n    }\r\n})\r\n\r\n// API\r\n\r\nexport const API = {\r\n    getPeople: (currentPage: number = 1, pageSize: number, searchForm: searchFormType = {term: '', friend: ''}) => {\r\n        return instance.get<GetpeopleDataType>(`users?page=${currentPage}&count=${pageSize}&term=${searchForm.term}&friend=${searchForm.friend}`)\r\n            .then( data => data.data)\r\n    },\r\n    postFollow: (userId: number) => {\r\n        return instance.post<CommonDataType>(`follow/${userId}`)\r\n            .then( data => data.data.resultCode)\r\n    },\r\n    deleteFollow: (userId: number) => {\r\n        return instance.delete<CommonDataType>(`follow/${userId}`)\r\n            .then( data => data.data.resultCode)\r\n    },\r\n    isAuthCheck: () => {\r\n        return instance.get<AuthMeDataType>('auth/me')\r\n            .then( data => data.data)\r\n    },\r\n    getUser: (currentUserId: number | null) => {\r\n        return instance.get<profileType>(`profile/${currentUserId}`)\r\n            .then( data => data.data)\r\n    },\r\n    getStatusApi: (userId: number) => {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then( data => data.data)\r\n    },\r\n    putStatusApi: (status: string) => {\r\n        return instance.put<CommonDataType>(`profile/status`, { status })\r\n            .then( data => data.data.resultCode)\r\n    },\r\n    postLoginDataApi: (data: loginDataType) => {\r\n        let {email, password, rememberMe, captcha} = data\r\n        return instance.post<CommonDataType>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then( response => response.data )\r\n    },\r\n    getCaptchaApi: async () => {\r\n        const response = await instance.get<GetCaptchaUrlDataType>('security/get-captcha-url')\r\n        return response.data.url\r\n    },\r\n    logoutApi: () => {\r\n        return instance.delete<CommonDataType>(`auth/login`)\r\n            .then( response => response.data.resultCode)\r\n    },\r\n    putProfilePhotoApi: async (photo: File) => {\r\n        const photoForLoading = new FormData()\r\n        photoForLoading.append('image', photo);\r\n        const response = await instance.put<PhotosDataType>('profile/photo', photoForLoading, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n        return response.data\r\n    },\r\n    profileFormSubmitApi: async (info: profileType) => {\r\n        const response = await instance.put<CommonDataType>('profile', info)\r\n        return response.data\r\n    }\r\n}\r\n\r\n\r\n","\r\n\r\nexport const required = (value: string): string | undefined => {\r\n    if (value === undefined) return \"Required field\"\r\n    return undefined\r\n}\r\n\r\nexport const maxLengthCreator = (maxValue: number): ((value:string) => string | undefined) => (value: string) => {\r\n    if (value && value.length > maxValue) return `Maximum: ${maxValue} simbols`\r\n    return undefined\r\n}\r\n\r\nexport const submitValidator = (values: any) => {\r\n    console.log(values)\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { actionsTypes } from \"../types/types\"\r\nimport { AuthRedThunks } from \"./authReducer\"\r\n\r\nlet initialState = {\r\n    initialised: false as boolean\r\n}\r\n\r\n// Reducer\r\n\r\ntype initialStateType = typeof initialState\r\nexport const appReducer = (state = initialState, action: actionsTypes<typeof AppRedActions>): initialStateType => {\r\n    switch (action.type) {\r\n        case 'INITIALISE_APP':\r\n            return {\r\n                ...state,\r\n                initialised: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const AppRedActions = {\r\n    initialiseApp: () => ({type: 'INITIALISE_APP'} as const)\r\n}\r\n\r\n// Thunks\r\n\r\n// type dipatchType = Dispatch<actionsTypes<typeof AppRedActions>>\r\n\r\nexport const AppRedThunks = {\r\n    initialiasationSuccess: () => async (dispatch: any) => {\r\n        let promise = dispatch(AuthRedThunks.authMe())\r\n        await Promise.all([promise])\r\n        dispatch(AppRedActions.initialiseApp())\r\n\r\n    \r\n    } \r\n}\r\n","import { actionsTypes, dialogsPersonType, messageType } from '../types/types'\r\nimport imgandrey from './img/andrey.jpg'\r\nimport imgfyodor from './img/fyodor.jpg'\r\nimport imgkirill from './img/kirill.jpg'\r\nimport imgsasha from './img/sasha.jpg'\r\nimport imgvadim from './img/vadim.jpg'\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    persons: [\r\n        { img: imgvadim, url: \"vadim\", name: \"Vadim\", id: 1 },\r\n        { img: imgfyodor, url: \"fyodor\", name: \"Fyodor\", id: 2 },\r\n        { img: imgkirill, url: \"kirill\", name: \"Kirill\", id: 4 },\r\n        { img: imgandrey, url: \"andrey\", name: \"Andrey\", id: 3 },\r\n        { img: imgsasha, url: \"sasha\", name: \"Sasha\", id: 5 }\r\n    ] as Array<dialogsPersonType>,\r\n    messages: [\r\n        { author: \"you\", id: 1, message: \"Hello there\" },\r\n        { author: \"not\", id: 2, message: \"Hi man\" },\r\n        { author: \"you\", id: 3, message: \"How are you\" },\r\n        { author: \"not\", id: 4, message: \"I'm good\" }\r\n    ] as Array<messageType>,\r\n}\r\n\r\n// Reducer\r\n\r\ntype initialStateType = typeof initialState\r\nexport const dialogReducer = (state = initialState, action: actionsTypes<typeof DialogRedActions>): initialStateType => {\r\n    switch(action.type) {\r\n        case 'ADD_MESSAGE':\r\n            let newMessage = {\r\n                author: \"you\",\r\n                id: 7, \r\n                message: action.text\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const DialogRedActions = {\r\n    newMessage: (text: string) => ({ type : 'ADD_MESSAGE', text } as const)\r\n}\r\n\r\n","import { friendsType, linkType } from '../types/types'\r\nimport imgandrey from './img/andrey.jpg'\r\nimport imgfyodor from './img/fyodor.jpg'\r\nimport imgkirill from './img/kirill.jpg'\r\nimport imgsasha from './img/sasha.jpg'\r\nimport imgvadim from './img/vadim.jpg'\r\n\r\n// State\r\n\r\nlet initialState = {\r\n    links: [\r\n        {name: \"Profile\", to: \"/profile\", id: 1111},\r\n        {name: \"Messages\", to: \"/dialogs\", id: 2222},\r\n        {name: \"News\", to: \"/news\", id: 3333},\r\n        {name: \"Music\", to: \"/music\", id: 4444},\r\n        {name: \"Find people\", to: \"/find\", id: 5555},\r\n        {name: \"Settings\", to: \"/settings\", id: 6666}\r\n    ] as Array<linkType>,\r\n    friends: [\r\n        { img: imgvadim, name: \"Vadim\", id: 123 },\r\n        { img: imgfyodor, name: \"Fyodor\", id: 124 },\r\n        { img: imgkirill, name: \"Kirill\", id: 125 },\r\n        { img: imgandrey, name: \"Andrey\", id: 126 },\r\n        { img: imgsasha, name: \"Sasha\", id: 127 }\r\n    ] as Array<friendsType>\r\n}\r\n\r\nexport type NavStateType = typeof initialState\r\n\r\n// Reducer\r\n\r\nexport const navReducer = (state = initialState): NavStateType => {\r\n    return state\r\n}\r\n","import thunk from \"redux-thunk\";\r\nimport { authReducer } from \"./authReducer\";\r\nimport findPeopleReducer from \"./findPeopleReducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport { appReducer } from \"./appReducer\";\r\nimport { contentReducer } from \"./contentReducer\";\r\nimport { dialogReducer } from \"./dialogsReducer\";\r\nimport { navReducer } from \"./navReducer\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { chatReducer } from \"./chatReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    auth: authReducer,\r\n    contentPage: contentReducer,\r\n    dialogPage: dialogReducer,\r\n    findpeople: findPeopleReducer,\r\n    navPage: navReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport default store","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype propsType = {\r\n    to: string\r\n    name: string\r\n}\r\n\r\nconst Link: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={props.to} >{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Link","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport css from './person.module.css'\r\n\r\ntype propsType = {\r\n    url: string\r\n    img: string\r\n    name: string\r\n}\r\n\r\nconst Person: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={css.main}>\r\n            <NavLink to={\"/dialogs/\" + props.url} activeClassName={css.active}>\r\n                <img src={props.img} alt={props.url}/>\r\n                <label>{props.name}</label>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Person","import React from 'react'\r\nimport css from './message.module.css'\r\n\r\ntype propsType = {\r\n    author: string\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<propsType> = (props) => {\r\n    if (props.author === \"you\") return (\r\n        <div className={`${css.main} ${css.you}`}>\r\n            <div>\r\n                <p>{props.message}</p>\r\n                <p className={css.undertext}>{props.author}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n    else return (\r\n        <div className={`${css.main}`}>\r\n            <div>\r\n                <p>{props.message}</p>\r\n                <p className={css.undertext}>{props.author}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message","import css from './dialogs.module.css'\r\nimport Person from './dialogscomponents/person/person'\r\nimport Message from './dialogscomponents/message/message'\r\nimport React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm, WrappedFieldProps } from 'redux-form'\r\nimport { ErrorSpan } from '../component/error/error'\r\nimport { maxLengthCreator, required } from '../component/validatior/valodator'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../redux/redux-state'\r\nimport { DialogRedActions } from '../../redux/dialogsReducer'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\n\r\n\r\n\r\nexport const DialogsPage: React.FC<{}> = (props) => {\r\n\r\n    const persons = useSelector((state: AppStateType) => state.dialogPage.persons)\r\n    const messages = useSelector((state: AppStateType) => state.dialogPage.messages)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const submit = (data: IUserDialogForm) => {\r\n        dispatch(DialogRedActions.newMessage(data.textWriting))\r\n    }\r\n\r\n    let personComponents = persons.map(el => <Person key={el.id} img={el.img} url={el.url} name={el.name} />)\r\n    let messageComponents = messages.map(el => <Message key={el.id} author={el.author} message={el.message} />)\r\n\r\n    return (\r\n        <div className={css.item}>\r\n            <h2>Dialogs</h2>\r\n            <div className={css.columns}>\r\n                <div>\r\n                    {personComponents}\r\n                </div>\r\n                <div className={css.messages}>\r\n                    <div>\r\n                        {messageComponents}\r\n                    </div>\r\n                    <DialogFormRedux onSubmit={submit} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\ntype IUserDialogForm = {\r\n    textWriting: string\r\n}\r\ntype IPropsDialogForm = {\r\n\r\n}\r\n\r\nconst DialogForm: React.FC<InjectedFormProps<IUserDialogForm, IPropsDialogForm> & IPropsDialogForm> = (props) => {\r\n    return <>\r\n    <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea} name=\"textWriting\" validate={[required, maxLength30]}/>\r\n        <button>Send</button>\r\n    </form>\r\n    </>\r\n}\r\n\r\ntype TextAreaPropsType = {\r\n    \r\n}\r\n\r\nconst Textarea: React.FC<WrappedFieldProps & TextAreaPropsType> = ({input, meta, ...props}) => {\r\n    const haveError = meta.error && meta.touched\r\n    return <div className={haveError ? css.error : \"\"} >\r\n    <div className={css.errorMessage}>{haveError && <ErrorSpan content={meta.error} />}</div>\r\n    <textarea {...input} {...props}  />\r\n</div>\r\n}\r\n\r\nconst DialogFormRedux = reduxForm<IUserDialogForm, IPropsDialogForm>({ form: \"dialogWriting\" })(DialogForm)\r\n","import React from 'react'\r\nimport css from './music.module.css'\r\n\r\n\r\nexport const MusicPage: React.FC = (props) => {\r\n    return (\r\n        <div className={css.item}>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport css from './news.module.css'\r\n\r\n\r\n\r\nexport const NewsPage: React.FC = (props) => {\r\n    return (\r\n        <div className={css.item}>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport css from './settings.module.css'\r\n\r\nexport const SettingsPage: React.FC = (props) => {\r\n    return (\r\n        <div className={css.item}>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { AppStateType } from '../../redux/redux-state'\r\nimport css from './header.module.css'\r\n\r\n\r\n\r\nexport const LoginInfoInHeader: React.FC = (props) => {\r\n\r\n    const loginInfo = useSelector((state: AppStateType) => state.auth)\r\n\r\n    return <>\r\n        {loginInfo.isAuth\r\n            ? <NavLink className={css.link} to={`/profile/${loginInfo.userId}`} >{loginInfo.userName}</NavLink> \r\n            : <NavLink className={css.link} to={`/login`} >login</NavLink>\r\n        }\r\n    </>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/vk_icon.aacb54b4.svg\";","import React, { FC, Suspense, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRedThunks } from './redux/appReducer';\nimport { Preloader } from './things/component/preloader/preloader';\nimport { Button, Layout, Menu, Row } from 'antd';\nimport { AppStateType } from './redux/redux-state'\nimport Link from './things/nav/navlink/navlink';\nimport { Redirect, Route, Switch, withRouter } from 'react-router';\nimport { DialogsPage } from './things/dialogs/dialogs';\nimport { MusicPage } from './things/music/music';\nimport { NewsPage } from './things/news/news';\nimport { SettingsPage } from './things/settings/settings';\nimport { LoginInfoInHeader } from './things/header/header';\nimport vkIcon from './assets/vk_icon.svg'\nimport { NavLink } from 'react-router-dom';\nimport { AuthRedThunks } from './redux/authReducer';\n\n\n\n\n// const DialogPage = React.lazy(() => import('./things/dialogs/dialogs'));\nconst FindPeoplePage = React.lazy(() => import('./things/findpeople/findpeople'));\nconst ContentPage = React.lazy(() => import('./things/content/content'));\nconst LoginPage = React.lazy(() => import('./things/login/login'));\nconst ChatPage = React.lazy(() => import('./things/chat/ChatPage'));\n// const NewsPage = React.lazy(() => import('./things/news/news'));\n// const MusicPage = React.lazy(() => import('./things/music/music'));\n// const SettingsPage = React.lazy(() => import('./things/settings/settings'));\n\n\n\nconst AppCopy: FC = (props) => {\n\n  const { Header, Content, Footer, Sider } = Layout\n\n  const isAuth = useSelector((state: AppStateType) => state.app.initialised)\n  const isLoginned = useSelector((state: AppStateType) => state.auth.isAuth)\n\n  const dispatch = useDispatch()\n\n  useMemo(() => {\n    dispatch(AppRedThunks.initialiasationSuccess())\n  }, [dispatch])\n\n\n  if (!isAuth) return <Preloader />\n  else return <>\n    <Layout style={{ background: '#40a9ff', fontSize: '1.4em' }}>\n      <Header style={{ background: '#0050b3', height: '80px' }}>\n        <Row justify='space-between' align='middle' style={{ height: '100%' }}>\n          <img src={vkIcon} style={{ height: '70px' }} />\n          <LoginInfoInHeader />\n        </Row>\n      </Header>\n      <Content style={{ padding: '0 50px' }}  >\n        <Layout className=\"site-layout-background\" style={{ padding: '24px 0', background: '#40a9ff' }}>\n          <Sider className=\"site-layout-background\" width={250} style={{ background: '#40a9ff' }} >\n            <Menu mode=\"inline\" style={{ border: '0px', background: '#91d5ff', height: '300px' }} >\n              <Menu.Item key=\"1\" style={{ fontSize: '1.4em', height: '50px' }} >\n                <NavLink to=\"/profile\" >Profile</NavLink>\n              </Menu.Item>\n              <Menu.Item key=\"2\" style={{ fontSize: '1.4em', height: '50px' }} >\n                <Link name=\"All users\" to=\"/find\" />\n              </Menu.Item>\n              <Menu.Item key=\"3\" style={{ fontSize: '1.4em', height: '50px' }} >\n                <Link name=\"Chat\" to=\"/chat\" />\n              </Menu.Item>\n              <Menu.Item key=\"4\" style={{ fontSize: '1.4em', height: '50px' }} >\n                <Link name=\"Chat old page\" to=\"/dialogs\" />\n              </Menu.Item>\n              \n            </Menu>\n            {isLoginned ? <Button type='primary' danger\n              style={{ fontSize: '1em', height: '40px', marginTop: '20px' }}\n              htmlType='button'\n              onClick={() => dispatch(AuthRedThunks.logout())} >\n              LogOut</Button> : null}\n          </Sider>\n          <Content style={{ padding: '0 0 0 24px', minHeight: 280, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            <Suspense fallback={Preloader}>\n              <Switch>\n                <Redirect exact from='/' to='/profile' />\n                <Route path='/profile/:userId?' render={() => <ContentPage />} />\n                <Route path='/dialogs' render={() => <DialogsPage />} />\n                <Route path='/news' render={() => <NewsPage />} />\n                <Route path='/music' render={() => <MusicPage />} />\n                <Route path='/find' render={() => <FindPeoplePage />} />\n                <Route path='/settings' render={() => <SettingsPage />} />\n                <Route path='/login' render={() => <LoginPage />} />\n                <Route path='/chat' render={() => <ChatPage />} />\n                <Route path='*' render={() => <div>Nothing</div>} />\n              </Switch>\n            </Suspense>\n          </Content>\n        </Layout>\n      </Content>\n      <Footer style={{ textAlign: 'center', background: '#0050b3', height: '80px', color: 'white', fontSize: '1em' }}>\n        Social Network ¬©2021 Created by Sivkov Fyodor\n      </Footer>\n    </Layout>\n  </>\n}\n\nexport default withRouter(AppCopy)","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/redux-state';\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom';\nimport  AppCopy  from './App–°opy';\nimport 'antd/dist/antd.css';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <AppCopy />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n\nreportWebVitals();\n","export default __webpack_public_path__ + \"static/media/andrey.8cab7208.jpg\";","export default __webpack_public_path__ + \"static/media/fyodor.8864fbea.jpg\";","export default __webpack_public_path__ + \"static/media/kirill.195364cd.jpg\";","export default __webpack_public_path__ + \"static/media/sasha.f5320e26.jpg\";","export default __webpack_public_path__ + \"static/media/vadim.8abdb6ac.jpg\";","import { Dispatch } from \"redux\"\r\nimport { stopSubmit } from \"redux-form\"\r\nimport { API, loginDataType } from \"../dal/api\"\r\nimport { actionsTypes } from \"../types/types\"\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    userName: null as string | null,\r\n    userEmail: null as string | null,\r\n    isAuth: false as boolean,\r\n    fieldError: null as string | null,\r\n    captcha: null as string | null\r\n}\r\n\r\n// Reducer\r\n\r\nexport type AuthStateType = typeof initialState\r\nexport const authReducer = (state = initialState, action: actionsTypes<typeof AuthRedActions>): AuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH_ME':\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case 'FIND_ERROR':\r\n            return {\r\n                ...state,\r\n                fieldError: action.error\r\n            }\r\n        case 'GET_CAPTCHA':\r\n            return {\r\n                ...state,\r\n                captcha: action.captchaUrl\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const AuthRedActions = {\r\n    authMeAC: (userId: number | null, userEmail: string | null, userName: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH_ME',\r\n        data: { userId, userEmail, userName, isAuth }\r\n    } as const),\r\n    getCaptcha: (captchaUrl: string | null) => ({ type: 'GET_CAPTCHA', captchaUrl } as const),\r\n    findError: (error: string) => ({ type: 'FIND_ERROR', error} as const)\r\n}\r\n\r\n// Thunks\r\n\r\ntype AuthRedDispatchType = Dispatch<actionsTypes<typeof AuthRedActions>>\r\n\r\nexport const AuthRedThunks = {\r\n    authMe: () => async (dispatch: AuthRedDispatchType) => {\r\n        const response = await API.isAuthCheck()\r\n        if (response.resultCode === 0) {\r\n            const { id, email, login } = response.data\r\n            dispatch(AuthRedActions.authMeAC(id, email, login, true))\r\n        }\r\n    },\r\n    postLoginData: (data: loginDataType) => async (dispatch: AuthRedDispatchType) => {\r\n        const loginData = await API.postLoginDataApi(data)\r\n        if (loginData.resultCode === 0) {\r\n            const authCheck = await API.isAuthCheck()\r\n            if (authCheck.resultCode === 0) {\r\n                let { id, email, login } = authCheck.data\r\n                dispatch(AuthRedActions.authMeAC(id, email, login, true))\r\n            }\r\n            dispatch(AuthRedActions.getCaptcha(null))\r\n        } else {\r\n            // @ts-ignore\r\n            dispatch(stopSubmit(\"login\", { _error: loginData.messages[0] }))\r\n            if (loginData.resultCode === 10) {\r\n                const captchaUrl = await API.getCaptchaApi()\r\n                dispatch(AuthRedActions.getCaptcha(captchaUrl))\r\n            }\r\n        } \r\n    },\r\n    logout: () => async (dispatch: AuthRedDispatchType) => {\r\n        const response = await API.logoutApi()\r\n        if (response === 0) {\r\n            dispatch(AuthRedActions.authMeAC(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"dialogs_item__3alLP\",\"columns\":\"dialogs_columns__VSBum\",\"messages\":\"dialogs_messages__gSUJS\",\"error\":\"dialogs_error__IuA5U\",\"errorMessage\":\"dialogs_errorMessage__ASATI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"message_main__3Jd2Y\",\"you\":\"message_you__2BDay\",\"undertext\":\"message_undertext__bBin2\"};"],"sourceRoot":""}