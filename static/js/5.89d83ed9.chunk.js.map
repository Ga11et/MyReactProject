{"version":3,"sources":["things/component/error/error.tsx","things/component/error/error.module.css","things/component/validatior/valodator.ts","hoc/withAuthRedirect.tsx","things/dialogs/dialogs.module.css","things/dialogs/dialogscomponents/person/person.module.css","things/dialogs/dialogscomponents/message/message.module.css","things/dialogs/dialogscomponents/person/person.tsx","things/dialogs/dialogscomponents/message/message.tsx","things/dialogs/dialogs.tsx","things/dialogs/dialogsContainer.tsx"],"names":["ErrorSpan","props","className","css","item","content","module","exports","required","value","undefined","maxLengthCreator","maxValue","length","withAuthRedirect","Component","connect","state","isAuth","auth","to","Person","main","url","activeClassName","active","src","img","alt","name","Message","author","you","message","undertext","maxLength30","Textarea","input","meta","haveError","error","touched","errorMessage","DialogFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","Dialogs","personComponents","persons","map","el","id","messageComponents","messages","columns","data","newMessage","textWriting","mapDespatchToProps","DialogRedActions","compose","dialogPage"],"mappings":"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","file":"static/js/5.89d83ed9.chunk.js","sourcesContent":["import React from 'react'\r\nimport css from './error.module.css'\r\n\r\ntype propsType = {\r\n    content: string\r\n}\r\n\r\nexport const ErrorSpan: React.FC<propsType> = (props) => {\r\n    return <span className={css.item} {...props}>{props.content}</span>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"error_item__2NDaC\"};","\r\n\r\nexport const required = (value: string): string | undefined => {\r\n    if (value === undefined) return \"Required field\"\r\n    return undefined\r\n}\r\n\r\nexport const maxLengthCreator = (maxValue: number): ((value:string) => string | undefined) => (value: string) => {\r\n    if (value && value.length > maxValue) return `Maximum: ${maxValue} simbols`\r\n    return undefined\r\n}\r\n\r\nexport const submitValidator = (values: any) => {\r\n    console.log(values)\r\n}","import { AppStateType } from '../redux/redux-state';\r\nimport React, {FC } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { RedirectProps } from \"react-router\"\r\n\r\ntype propsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WP extends RedirectProps>(Component: FC<WP>) {\r\n\r\n    const RedirectComponent: FC<RedirectProps & propsType> = ({isAuth, ...props}) => {\r\n        \r\n        if (!isAuth) return <Redirect to=\"/login\" />\r\n        else return <Component {...props as WP} />\r\n    \r\n    }\r\n\r\n    const mapStateToProps = (state: AppStateType) => ({\r\n        isAuth: state.auth.isAuth\r\n    })\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"dialogs_item__2QM9W\",\"columns\":\"dialogs_columns__32YIa\",\"messages\":\"dialogs_messages__2jcwO\",\"error\":\"dialogs_error__36W7K\",\"errorMessage\":\"dialogs_errorMessage__IfXuF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"person_main__JMapI\",\"active\":\"person_active__FODx5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"message_main__1njF4\",\"you\":\"message_you__3fZNt\",\"undertext\":\"message_undertext__p57gY\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport css from './person.module.css'\r\n\r\ntype propsType = {\r\n    url: string\r\n    img: string\r\n    name: string\r\n}\r\n\r\nconst Person: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={css.main}>\r\n            <NavLink to={\"/dialogs/\" + props.url} activeClassName={css.active}>\r\n                <img src={props.img} alt={props.url}/>\r\n                <label>{props.name}</label>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Person","import React from 'react'\r\nimport css from './message.module.css'\r\n\r\ntype propsType = {\r\n    author: string\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<propsType> = (props) => {\r\n    if (props.author === \"you\") return (\r\n        <div className={`${css.main} ${css.you}`}>\r\n            <div>\r\n                <p>{props.message}</p>\r\n                <p className={css.undertext}>{props.author}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n    else return (\r\n        <div className={`${css.main}`}>\r\n            <div>\r\n                <p>{props.message}</p>\r\n                <p className={css.undertext}>{props.author}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message","import css from './dialogs.module.css'\r\nimport Person from './dialogscomponents/person/person'\r\nimport Message from './dialogscomponents/message/message'\r\nimport React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm, WrappedFieldProps } from 'redux-form'\r\nimport { ErrorSpan } from '../component/error/error'\r\nimport { maxLengthCreator, required } from '../component/validatior/valodator'\r\nimport { dialogsPersonType, messageType } from '../../types/types'\r\n\r\ntype propsType = {\r\n    persons: Array<dialogsPersonType>\r\n    messages: Array<messageType>\r\n\r\n    newMessage: (text: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<propsType> = (props) => {\r\n\r\n    const submit = (data: IUserDialogForm) => {\r\n        props.newMessage(data.textWriting)\r\n    }\r\n\r\n    let personComponents = props.persons.map(el => <Person key={el.id} img={el.img} url={el.url} name={el.name} />)\r\n    let messageComponents = props.messages.map(el => <Message key={el.id} author={el.author} message={el.message} />)\r\n\r\n    return (\r\n        <div className={css.item}>\r\n            <h2>Dialogs</h2>\r\n            <div className={css.columns}>\r\n                <div>\r\n                    {personComponents}\r\n                </div>\r\n                <div className={css.messages}>\r\n                    <div>\r\n                        {messageComponents}\r\n                    </div>\r\n                    <DialogFormRedux onSubmit={submit} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\ntype IUserDialogForm = {\r\n    textWriting: string\r\n}\r\ntype IPropsDialogForm = {\r\n\r\n}\r\n\r\nconst DialogForm: React.FC<InjectedFormProps<IUserDialogForm, IPropsDialogForm> & IPropsDialogForm> = (props) => {\r\n    return <>\r\n    <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea} name=\"textWriting\" validate={[required, maxLength30]}/>\r\n        <button>Send</button>\r\n    </form>\r\n    </>\r\n}\r\n\r\ntype TextAreaPropsType = {\r\n    \r\n}\r\n\r\nconst Textarea: React.FC<WrappedFieldProps & TextAreaPropsType> = ({input, meta, ...props}) => {\r\n    const haveError = meta.error && meta.touched\r\n    return <div className={haveError ? css.error : \"\"} >\r\n    <div className={css.errorMessage}>{haveError && <ErrorSpan content={meta.error} />}</div>\r\n    <textarea {...input} {...props}  />\r\n</div>\r\n}\r\n\r\nconst DialogFormRedux = reduxForm<IUserDialogForm, IPropsDialogForm>({ form: \"dialogWriting\" })(DialogForm)\r\n\r\nexport default Dialogs","import Dialogs from './dialogs'\r\nimport {connect} from 'react-redux'\r\nimport React, { FC } from 'react'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { DialogRedActions } from '../../redux/dialogsReducer'\r\nimport { AppStateType } from '../../redux/redux-state'\r\nimport { dialogsPersonType, messageType } from '../../types/types'\r\n\r\ntype propsType = {\r\n    persons: Array<dialogsPersonType>\r\n    messages: Array<messageType>\r\n\r\n    newMessage: (text: string) => void\r\n}\r\n\r\nconst DialogsContainer: React.FC<propsType> = (props) => {\r\n    return <Dialogs {...props} />\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    persons: state.dialogPage.persons,\r\n    messages: state.dialogPage.messages,\r\n})\r\n\r\nconst mapDespatchToProps = {\r\n    newMessage: DialogRedActions.newMessage\r\n}\r\n\r\nexport default compose<FC<{}>>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDespatchToProps)\r\n)(DialogsContainer)"],"sourceRoot":""}