{"version":3,"sources":["hoc/withAuthRedirect.tsx","redux/selectors/selectors.ts","things/findpeople/findpeople.module.css","things/findpeople/person/person.module.css","things/component/paginator/paginator.module.css","things/findpeople/formiksearchform/formikSearchForm.module.css","things/findpeople/person/person.tsx","redux/img/user.jpg","things/component/paginator/paginator.tsx","things/findpeople/formiksearchform/formikSearchForm.tsx","things/findpeople/findpeople.tsx","things/findpeople/findpeopleContainer.tsx"],"names":["withAuthRedirect","Component","connect","state","isAuth","auth","props","to","findPeople","someState","findpeople","FindPeoplrSelectors","isLoadingSelector","createSelector","data","isLoading","getPeopleSelector","people","countPagesSelector","countPeople","countPeopleOnPageSelector","countPeopleOnPage","activePageSelector","active","description","contentPage","DescriptionSelectors","profileInfoSelector","profile","statusSelector","status","isSuccessedSelector","successed","AuthSelectors","authIdSelector","userId","module","exports","Person","className","css","body","avatar","src","alt","followed","disabled","isButtonLoading","some","el","onClick","unFollow","follow","main","name","location","country","city","PaginatorScript","count","Math","ceil","countPages","useState","currentNumbersPage","setCurrentNumbersPage","firstPage","lastPage","numbers","i","numbersJsx","filter","map","onNumberPageClick","numberPage","activePage","noactive","item","FoemikSearchForm","initialValues","term","friend","onSubmit","values","setSubmitting","putSearchForm","isSubmitting","type","component","id","value","FindPeople","persons","photos","small","userImg","followPerson","unFollowPerson","loadingIconfrom","mapDespatchToProps","changeActivePage","FindPeopleRedActions","showPeople","FindPeopleRedThunks","compose","arrayButtonsLoading","searchForm","useEffect","useMemo","number"],"mappings":"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","file":"static/js/7.00d2bc49.chunk.js","sourcesContent":["import { AppStateType } from '../redux/redux-state';\r\nimport React, {FC } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { RedirectProps } from \"react-router\"\r\n\r\ntype propsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WP extends RedirectProps>(Component: FC<WP>) {\r\n\r\n    const RedirectComponent: FC<RedirectProps & propsType> = ({isAuth, ...props}) => {\r\n        \r\n        if (!isAuth) return <Redirect to=\"/login\" />\r\n        else return <Component {...props as WP} />\r\n    \r\n    }\r\n\r\n    const mapStateToProps = (state: AppStateType) => ({\r\n        isAuth: state.auth.isAuth\r\n    })\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n","import { createSelector } from \"reselect\"\r\nimport { AppStateType } from \"../redux-state\"\r\n\r\n// FindPeoplePage\r\nconst findPeople = (someState: AppStateType) => someState.findpeople\r\nexport const FindPeoplrSelectors = {\r\n    isLoadingSelector: createSelector( findPeople, data => data.isLoading),\r\n    getPeopleSelector: createSelector( findPeople, data => data.people),\r\n    countPagesSelector: createSelector( findPeople, data => data.countPeople),\r\n    countPeopleOnPageSelector: createSelector( findPeople, data => data.countPeopleOnPage),\r\n    activePageSelector: createSelector( findPeople, data => data.active)\r\n}\r\n\r\n// Description\r\nconst description = (someState: AppStateType) => someState.contentPage\r\nexport const DescriptionSelectors = {\r\n    profileInfoSelector: createSelector( description, data => data.profile),\r\n    statusSelector: createSelector( description, data => data.status),\r\n    isSuccessedSelector: createSelector( description, data => data.successed)\r\n}\r\n\r\n// Auth\r\nconst auth = (someState: AppStateType) => someState.auth\r\nexport const AuthSelectors = {\r\n    authIdSelector: createSelector( auth, data => data.userId)\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"findpeople_main__1WkGT\",\"numberPage\":\"findpeople_numberPage__201GX\",\"active\":\"findpeople_active__cy1xI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"person_body__7eYpn\",\"avatar\":\"person_avatar__15Rze\",\"main\":\"person_main__26TwK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"paginator_item__3iRxz\",\"numberPage\":\"paginator_numberPage__gpYIb\",\"active\":\"paginator_active__1yGtR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"formikSearchForm_main__18gyd\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport css from './person.module.css'\r\n\r\ntype propsType = {\r\n    userId: number\r\n    avatar: string\r\n    followed: boolean\r\n    isButtonLoading: Array<number>\r\n    name: string\r\n    status: string\r\n    country: string\r\n    city: string\r\n\r\n    unFollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst Person: React.FC<propsType> = (props) => {\r\n    return (\r\n        <section className={css.body}>\r\n            <div className={css.avatar}>\r\n                <NavLink to={`/profile/${props.userId}`} >\r\n                    <img src={props.avatar} alt=\"avatar\" />\r\n                </NavLink>\r\n                {(props.followed)\r\n                    ? <button disabled={props.isButtonLoading.some( el => el === props.userId)} \r\n                            onClick={() => props.unFollow(props.userId)}>Unfollow</button>\r\n                    : <button disabled={props.isButtonLoading.some( el => el === props.userId)} \r\n                            onClick={() => props.follow(props.userId)}>Follow</button>}\r\n            </div>\r\n            <div className={css.main}>\r\n                <div className={css.name}>\r\n                    <NavLink to={`/profile/${props.userId}`} >\r\n                        <p>{props.name}</p>\r\n                    </NavLink>\r\n                    <p>{props.status}</p>\r\n                </div>\r\n                <div className={css.location}>\r\n                    <p>{props.country}</p>\r\n                    <p>{props.city}</p>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Person","export default __webpack_public_path__ + \"static/media/user.5edf0c2b.jpg\";","import { useState } from 'react'\r\nimport css from './paginator.module.css'\r\n\r\ntype propsType = {\r\n    countPages: number\r\n    countPeopleOnPage: number\r\n    activePage: number\r\n\r\n    onNumberPageClick: (pageNumber: number) => void\r\n}\r\n\r\nexport const PaginatorScript: React.FC<propsType> = (props) => {\r\n\r\n    const count = Math.ceil(props.countPages / props.countPeopleOnPage)\r\n    const numbersOnOnePage = 10\r\n\r\n    let [currentNumbersPage, setCurrentNumbersPage] = useState(1)\r\n    let firstPage = (currentNumbersPage - 1) * numbersOnOnePage + 1\r\n    let lastPage = firstPage + numbersOnOnePage\r\n    let numbers: Array<number> = []\r\n    for (let i = 1; i <= count; i++) numbers[i] = i\r\n    const numbersJsx = numbers\r\n        .filter(el => el >= firstPage && el <= lastPage)\r\n        .map(el => <div key={el}\r\n            onClick={() => props.onNumberPageClick(el)}\r\n            className={`${css.numberPage} ${props.activePage === el ? css.active : css.noactive}`}>{el}</div>)\r\n\r\n    return (\r\n        <div className={css.item}>\r\n            {currentNumbersPage > 1 && <button\r\n                onClick={() => setCurrentNumbersPage(currentNumbersPage - 1)} >-</button>}\r\n            {numbersJsx}\r\n            {currentNumbersPage < count / numbersOnOnePage && <button\r\n                onClick={() => setCurrentNumbersPage(currentNumbersPage + 1)} >+</button>}\r\n        </div>\r\n    )\r\n}","import { Field, Form, Formik } from \"formik\";\r\nimport React, { FC } from \"react\"\r\nimport { searchFormType } from \"../../../types/types\";\r\nimport css from './formikSearchForm.module.css'\r\n\r\ntype props = {\r\n    putSearchForm: (searchForm: searchFormType) => void\r\n}\r\n\r\nexport const FoemikSearchForm: FC<props> = (props) => {\r\n\r\n\r\n    return <>\r\n        <Formik \r\n            initialValues={{ term: '', friend: '' }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                props.putSearchForm(values)\r\n                setSubmitting(false);\r\n            }} >\r\n            {({ isSubmitting }) => (\r\n                <Form className={css.main}>\r\n                    <Field type=\"test\" name=\"term\" />\r\n                    <Field component=\"select\" id=\"friend\" name=\"friend\" >\r\n                        <option value=\"\">All</option>\r\n                        <option value='true'>Only followed</option>\r\n                        <option value='false'>Only not followed</option>\r\n                    </Field>\r\n\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Search\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </>\r\n}","import css from './findpeople.module.css'\r\nimport Person from './person/person'\r\nimport userImg from '../../redux/img/user.jpg'\r\nimport React from 'react'\r\nimport loadingIconfrom from '../../assets/loading.svg'\r\nimport {PaginatorScript} from '../component/paginator/paginator'\r\nimport { personType, searchFormType } from '../../types/types'\r\nimport { FoemikSearchForm } from './formiksearchform/formikSearchForm'\r\n\r\ntype propsType = {\r\n    people: Array<personType>\r\n    isButtonLoading: Array<number>\r\n    countPages: number\r\n    countPeopleOnPage: number\r\n    activePage: number\r\n    isLoading: boolean\r\n    searchForm: searchFormType\r\n\r\n    onNumberPageClick: (pageId: number) => void\r\n    followPerson: (userId: number) => void\r\n    unFollowPerson: (userId: number) => void\r\n    putSearchForm: (searchForm: searchFormType) => void\r\n}\r\n\r\nconst FindPeople: React.FC<propsType> = (props) => {\r\n\r\n\r\n    const persons = props.people.map((el) => {\r\n        return (\r\n            <Person userId={el.id}\r\n                avatar={el.photos.small != null ? el.photos.small : userImg}\r\n                followed={el.followed}\r\n                name={el.name}\r\n                status={el.status}\r\n                country={\"some country\"}\r\n                city={\"some city\"}\r\n                follow={props.followPerson}\r\n                unFollow={props.unFollowPerson}\r\n                isButtonLoading={props.isButtonLoading}\r\n                key={el.id} />\r\n    )})\r\n    return (\r\n        <div className={css.main}>\r\n            <FoemikSearchForm putSearchForm={props.putSearchForm} />\r\n            <PaginatorScript countPages={props.countPages}\r\n                countPeopleOnPage={props.countPeopleOnPage}\r\n                onNumberPageClick={props.onNumberPageClick}\r\n                activePage={props.activePage} />\r\n            {props.isLoading ? <img src={loadingIconfrom} alt='loadingIcon' /> : null}\r\n            {persons}\r\n            <PaginatorScript countPages={props.countPages}\r\n                countPeopleOnPage={props.countPeopleOnPage}\r\n                onNumberPageClick={props.onNumberPageClick}\r\n                activePage={props.activePage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FindPeople","import { connect } from \"react-redux\";\r\nimport FindPeople from './findpeople'\r\nimport React, { FC, useEffect, useMemo } from 'react'\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { FindPeoplrSelectors } from \"../../redux/selectors/selectors\";\r\nimport { FindPeopleRedActions, FindPeopleRedThunks } from \"../../redux/findPeopleReducer\";\r\nimport { AppStateType } from \"../../redux/redux-state\";\r\nimport { personType, searchFormType } from \"../../types/types\";\r\n\r\ntype propsType = {\r\n    countPeopleOnPage: number\r\n    people: Array<personType>\r\n    countPages: number\r\n    isLoading: boolean\r\n    isButtonLoading: Array<number>\r\n    activePage: number,\r\n    searchForm: searchFormType\r\n\r\n    followPerson: (userId: number) => void\r\n    unFollowPerson: (userId: number) => void\r\n    changeActivePage: (pageNymber: number) => void\r\n    showPeople: (pageNumber: number, peopleOnPage: number, searchForm: searchFormType) => void\r\n    putSearchForm: (searchForm: searchFormType) => void\r\n}\r\n\r\nconst FindPeopleContainer: FC<propsType> = ({searchForm, activePage, countPeopleOnPage, showPeople, ...props}) => {\r\n    \r\n    useEffect(() => {\r\n        props.changeActivePage(1)\r\n        showPeople(1, countPeopleOnPage, searchForm)\r\n    }, [searchForm, countPeopleOnPage, showPeople])\r\n\r\n    useEffect(() => {\r\n        showPeople(activePage, countPeopleOnPage, searchForm)\r\n    }, [activePage])\r\n\r\n    useMemo(() => {\r\n        showPeople(1, countPeopleOnPage, searchForm)\r\n    }, [searchForm, countPeopleOnPage, showPeople])\r\n\r\n    const onNumberPageClick = (number: number) => {\r\n        props.changeActivePage(number)\r\n    }\r\n    return <FindPeople\r\n        searchForm={searchForm}\r\n        onNumberPageClick={onNumberPageClick}\r\n        people={props.people}\r\n        countPages={props.countPages}\r\n        countPeopleOnPage={countPeopleOnPage}\r\n        isLoading={props.isLoading}\r\n        activePage={activePage}\r\n        followPerson={props.followPerson}\r\n        unFollowPerson={props.unFollowPerson}\r\n        isButtonLoading={props.isButtonLoading}\r\n        putSearchForm={props.putSearchForm}  />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        people: FindPeoplrSelectors.getPeopleSelector(state),\r\n        countPages: FindPeoplrSelectors.countPagesSelector(state),\r\n        countPeopleOnPage: FindPeoplrSelectors.countPeopleOnPageSelector(state),\r\n        activePage: FindPeoplrSelectors.activePageSelector(state),\r\n        isLoading: FindPeoplrSelectors.isLoadingSelector(state),\r\n        isButtonLoading: state.findpeople.arrayButtonsLoading,\r\n        searchForm: state.findpeople.searchForm\r\n    }\r\n}\r\nconst mapDespatchToProps = {\r\n    changeActivePage: FindPeopleRedActions.changeActivePage,\r\n    showPeople: FindPeopleRedThunks.showPeople,\r\n    followPerson: FindPeopleRedThunks.followPerson,\r\n    unFollowPerson: FindPeopleRedThunks.unFollowPerson,\r\n    putSearchForm: FindPeopleRedActions.putSearchForm\r\n}\r\n\r\nexport default compose<FC<{}>>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDespatchToProps)\r\n)(FindPeopleContainer)\r\n"],"sourceRoot":""}